<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>创建型 on 计算机学习笔记</title>
    <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/</link>
    <description>Recent content in 创建型 on 计算机学习笔记</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>抽象工厂</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/abstract-factory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/abstract-factory/</guid>
      <description>抽象工厂模式 #  Abstract Factory Pattern
提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类，具体的工厂负责实现具体的产品实例。
解析
 对产品进一步分类：抽象产品族 -&amp;gt; 抽象产品 -&amp;gt; 具体产品 每一个具体工厂，通过不同的工厂方法，可以实例化某 一类 产品族的多个具体产品  缺点
 对于新的产品族符合开闭原则，对于新的产品不符合开闭原则，这一特性称为 开闭原则的倾斜性 。 抽象工厂接口中已经确定了可以被创建的产品集合，如果需要添加新产品，此时就必须去修改抽象工厂的接口，违反开闭原则。  代码示例 #  C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript  </description>
    </item>
    
    <item>
      <title>构造器</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/builder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/builder/</guid>
      <description>构造器模式 #  Builder
 抽象 Builder 规定要有哪些方法（用来创建产品） 具体 Builder 的方法可以实现不一样的内容，这些方法按顺序完成后，可以创建出来特定的产品 Director 规定创建产品的步骤；接收具体的 Builder 对象作为参数，按步骤调用 Builder 对象的各个方法，最后获取到创建的产品  解析
 创建产品的步骤是一致的，所有步骤完成后，就创建出产品 不同 Builder 的同一步可以做不同的事情，最后创建出不同的产品  缺点
 建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式 如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大  代码示例 #  C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript  </description>
    </item>
    
    <item>
      <title>工厂方法</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/factory-method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/factory-method/</guid>
      <description>工厂方法模式 #  Factory Method
又称工厂模式、多态工厂模式和虚拟构造器模式，
通过定义工厂父类负责定义创建对象的公共接口，而子类则负责生成具体的对象。
 每个产品的实例化，分别有一个具体工厂负责 符合开闭原则：对扩展开放，对修改关闭 添加一种产品，就添加一种实现该产品的工厂  缺点
 每个工厂只能创建一类产品  代码示例 #  C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript   参考 #   简单工厂模式、工厂方法模式和抽象工厂模式有何区别？  </description>
    </item>
    
    <item>
      <title>原型</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/prototype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/prototype/</guid>
      <description>原型模式 #  Prototype
代码示例 #  C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript  </description>
    </item>
    
    <item>
      <title>单例</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/singleton/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/singleton/</guid>
      <description>单例模式 #  Singleton
实现方法 #   初始化时即创建单例  饿汉式 枚举类型   按需，延迟创建单例  懒汉式  基础实现 同步锁 双重检验锁   静态内部类实现    饿汉式（线程安全） #   JVM 在类的初始化阶段 (即 在 Class 被加载后、被线程使用前)，会执行类的初始化 在执行类的初始化期间，JVM 会去获取一个锁，这个锁可以同步多个线程对同一个类的初始化  class Singleton { // 1. 加载该类时，单例就会自动被创建  private static Singleton ourInstance = new Singleton(); // 2. 构造函数设置为 私有权限，禁止他人创建实例  private Singleton() { } // 3. 通过调用静态方法获得创建的单例  public static Singleton newInstance() { return ourInstance; } } 应用场景</description>
    </item>
    
  </channel>
</rss>
