<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>创建型 on 计算机学习笔记</title><link>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/</link><description>Recent content in 创建型 on 计算机学习笔记</description><generator>Hugo</generator><language>en</language><atom:link href="https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/index.xml" rel="self" type="application/rss+xml"/><item><title>抽象工厂</title><link>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/abstract-factory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/abstract-factory/</guid><description>&lt;h1 id="抽象工厂模式"&gt;
 抽象工厂模式
 
 &lt;a class="anchor" href="#%e6%8a%bd%e8%b1%a1%e5%b7%a5%e5%8e%82%e6%a8%a1%e5%bc%8f"&gt;#&lt;/a&gt;
 
&lt;/h1&gt;
&lt;p&gt;Abstract Factory Pattern&lt;/p&gt;
&lt;p&gt;提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类，具体的工厂负责实现具体的产品实例。&lt;/p&gt;
&lt;p&gt;解析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对产品进一步分类：抽象产品族 -&amp;gt; 抽象产品 -&amp;gt; 具体产品&lt;/li&gt;
&lt;li&gt;每一个具体工厂，通过不同的工厂方法，可以实例化某 一类 产品族的多个具体产品&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于新的产品族符合&lt;code&gt;开闭原则&lt;/code&gt;，对于新的产品不符合&lt;code&gt;开闭原则&lt;/code&gt;，这一特性称为 &lt;code&gt;开闭原则&lt;/code&gt;的倾斜性 。&lt;/li&gt;
&lt;li&gt;抽象工厂接口中已经确定了可以被创建的产品集合，如果需要添加新产品，此时就必须去修改抽象工厂的接口，违反开闭原则。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="代码示例"&gt;
 代码示例
 
 &lt;a class="anchor" href="#%e4%bb%a3%e7%a0%81%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;
 
&lt;/h2&gt;
&lt;div class="book-tabs"&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-0" checked="checked" /&gt;
&lt;label for="tabs-code-0"&gt;C&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```c

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-1" /&gt;
&lt;label for="tabs-code-1"&gt;C&amp;#43;&amp;#43;&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```c++

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-2" /&gt;
&lt;label for="tabs-code-2"&gt;C#&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```c#

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-3" /&gt;
&lt;label for="tabs-code-3"&gt;Go&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```go

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-4" /&gt;
&lt;label for="tabs-code-4"&gt;Java&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```java

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-5" /&gt;
&lt;label for="tabs-code-5"&gt;JavaScript&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```javascript

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-6" /&gt;
&lt;label for="tabs-code-6"&gt;Kotlin&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```kotlin

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-7" /&gt;
&lt;label for="tabs-code-7"&gt;PHP&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```php

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-8" /&gt;
&lt;label for="tabs-code-8"&gt;Python2&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```python

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-9" /&gt;
&lt;label for="tabs-code-9"&gt;Python3&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```python

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-10" /&gt;
&lt;label for="tabs-code-10"&gt;Ruby&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```ruby

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-11" /&gt;
&lt;label for="tabs-code-11"&gt;Rust&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```rust

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-12" /&gt;
&lt;label for="tabs-code-12"&gt;Scala&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```scala

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-13" /&gt;
&lt;label for="tabs-code-13"&gt;Swift&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```swift

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-14" /&gt;
&lt;label for="tabs-code-14"&gt;TypeScript&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```typescript

```

&lt;/div&gt;


---


&lt;/div&gt;</description></item><item><title>构造器</title><link>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/builder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/builder/</guid><description>&lt;h1 id="构造器模式"&gt;
 构造器模式
 
 &lt;a class="anchor" href="#%e6%9e%84%e9%80%a0%e5%99%a8%e6%a8%a1%e5%bc%8f"&gt;#&lt;/a&gt;
 
&lt;/h1&gt;
&lt;p&gt;Builder&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抽象 Builder 规定要有哪些方法（用来创建产品）&lt;/li&gt;
&lt;li&gt;具体 Builder 的方法可以实现不一样的内容，这些方法按顺序完成后，可以创建出来特定的产品&lt;/li&gt;
&lt;li&gt;Director 规定&lt;strong&gt;创建产品的步骤&lt;/strong&gt;；接收具体的 Builder 对象作为参数，按步骤调用 Builder 对象的各个方法，最后获取到创建的产品&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建产品的步骤是一致的&lt;/strong&gt;，所有步骤完成后，就创建出产品&lt;/li&gt;
&lt;li&gt;不同 Builder 的同一步可以做不同的事情，最后创建出不同的产品&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式&lt;/li&gt;
&lt;li&gt;如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="代码示例"&gt;
 代码示例
 
 &lt;a class="anchor" href="#%e4%bb%a3%e7%a0%81%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;
 
&lt;/h2&gt;
&lt;div class="book-tabs"&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-0" checked="checked" /&gt;
&lt;label for="tabs-code-0"&gt;C&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```c

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-1" /&gt;
&lt;label for="tabs-code-1"&gt;C&amp;#43;&amp;#43;&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```c++

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-2" /&gt;
&lt;label for="tabs-code-2"&gt;C#&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```c#

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-3" /&gt;
&lt;label for="tabs-code-3"&gt;Go&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```go

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-4" /&gt;
&lt;label for="tabs-code-4"&gt;Java&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```java

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-5" /&gt;
&lt;label for="tabs-code-5"&gt;JavaScript&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```javascript

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-6" /&gt;
&lt;label for="tabs-code-6"&gt;Kotlin&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```kotlin

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-7" /&gt;
&lt;label for="tabs-code-7"&gt;PHP&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```php

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-8" /&gt;
&lt;label for="tabs-code-8"&gt;Python2&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```python

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-9" /&gt;
&lt;label for="tabs-code-9"&gt;Python3&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```python

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-10" /&gt;
&lt;label for="tabs-code-10"&gt;Ruby&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```ruby

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-11" /&gt;
&lt;label for="tabs-code-11"&gt;Rust&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```rust

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-12" /&gt;
&lt;label for="tabs-code-12"&gt;Scala&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```scala

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-13" /&gt;
&lt;label for="tabs-code-13"&gt;Swift&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```swift

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-14" /&gt;
&lt;label for="tabs-code-14"&gt;TypeScript&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```typescript

```

&lt;/div&gt;


---


&lt;/div&gt;</description></item><item><title>工厂方法</title><link>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/factory-method/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/factory-method/</guid><description>&lt;h1 id="工厂方法模式"&gt;
 工厂方法模式
 
 &lt;a class="anchor" href="#%e5%b7%a5%e5%8e%82%e6%96%b9%e6%b3%95%e6%a8%a1%e5%bc%8f"&gt;#&lt;/a&gt;
 
&lt;/h1&gt;
&lt;p&gt;Factory Method&lt;/p&gt;
&lt;p&gt;又称工厂模式、多态工厂模式和虚拟构造器模式，&lt;/p&gt;
&lt;p&gt;通过定义&lt;strong&gt;工厂父类&lt;/strong&gt;负责定义创建对象的公共接口，而子类则负责生成具体的对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个产品的实例化，分别有一个具体工厂负责&lt;/li&gt;
&lt;li&gt;符合开闭原则：对扩展开放，对修改关闭&lt;/li&gt;
&lt;li&gt;添加一种产品，就添加一种实现该产品的工厂&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个工厂只能创建一类产品&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="代码示例"&gt;
 代码示例
 
 &lt;a class="anchor" href="#%e4%bb%a3%e7%a0%81%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;
 
&lt;/h2&gt;
&lt;div class="book-tabs"&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-0" checked="checked" /&gt;
&lt;label for="tabs-code-0"&gt;C&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```c

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-1" /&gt;
&lt;label for="tabs-code-1"&gt;C&amp;#43;&amp;#43;&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```c++

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-2" /&gt;
&lt;label for="tabs-code-2"&gt;C#&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```c#

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-3" /&gt;
&lt;label for="tabs-code-3"&gt;Go&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```go

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-4" /&gt;
&lt;label for="tabs-code-4"&gt;Java&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```java

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-5" /&gt;
&lt;label for="tabs-code-5"&gt;JavaScript&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```javascript

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-6" /&gt;
&lt;label for="tabs-code-6"&gt;Kotlin&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```kotlin

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-7" /&gt;
&lt;label for="tabs-code-7"&gt;PHP&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```php

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-8" /&gt;
&lt;label for="tabs-code-8"&gt;Python2&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```python

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-9" /&gt;
&lt;label for="tabs-code-9"&gt;Python3&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```python

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-10" /&gt;
&lt;label for="tabs-code-10"&gt;Ruby&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```ruby

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-11" /&gt;
&lt;label for="tabs-code-11"&gt;Rust&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```rust

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-12" /&gt;
&lt;label for="tabs-code-12"&gt;Scala&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```scala

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-13" /&gt;
&lt;label for="tabs-code-13"&gt;Swift&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```swift

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-14" /&gt;
&lt;label for="tabs-code-14"&gt;TypeScript&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```typescript

```

&lt;/div&gt;


---


&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id="参考"&gt;
 参考
 
 &lt;a class="anchor" href="#%e5%8f%82%e8%80%83"&gt;#&lt;/a&gt;
 
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/27125796"&gt;简单工厂模式、工厂方法模式和抽象工厂模式有何区别？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>原型</title><link>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/prototype/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/prototype/</guid><description>&lt;h1 id="原型模式"&gt;
 原型模式
 
 &lt;a class="anchor" href="#%e5%8e%9f%e5%9e%8b%e6%a8%a1%e5%bc%8f"&gt;#&lt;/a&gt;
 
&lt;/h1&gt;
&lt;p&gt;Prototype&lt;/p&gt;
&lt;h2 id="代码示例"&gt;
 代码示例
 
 &lt;a class="anchor" href="#%e4%bb%a3%e7%a0%81%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;
 
&lt;/h2&gt;
&lt;div class="book-tabs"&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-0" checked="checked" /&gt;
&lt;label for="tabs-code-0"&gt;C&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```c

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-1" /&gt;
&lt;label for="tabs-code-1"&gt;C&amp;#43;&amp;#43;&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```c++

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-2" /&gt;
&lt;label for="tabs-code-2"&gt;C#&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```c#

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-3" /&gt;
&lt;label for="tabs-code-3"&gt;Go&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```go

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-4" /&gt;
&lt;label for="tabs-code-4"&gt;Java&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```java

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-5" /&gt;
&lt;label for="tabs-code-5"&gt;JavaScript&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```javascript

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-6" /&gt;
&lt;label for="tabs-code-6"&gt;Kotlin&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```kotlin

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-7" /&gt;
&lt;label for="tabs-code-7"&gt;PHP&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```php

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-8" /&gt;
&lt;label for="tabs-code-8"&gt;Python2&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```python

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-9" /&gt;
&lt;label for="tabs-code-9"&gt;Python3&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```python

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-10" /&gt;
&lt;label for="tabs-code-10"&gt;Ruby&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```ruby

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-11" /&gt;
&lt;label for="tabs-code-11"&gt;Rust&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```rust

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-12" /&gt;
&lt;label for="tabs-code-12"&gt;Scala&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```scala

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-13" /&gt;
&lt;label for="tabs-code-13"&gt;Swift&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```swift

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-14" /&gt;
&lt;label for="tabs-code-14"&gt;TypeScript&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```typescript

```

&lt;/div&gt;


---


&lt;/div&gt;</description></item><item><title>单例</title><link>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/singleton/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/singleton/</guid><description>&lt;h1 id="单例模式"&gt;
 单例模式
 
 &lt;a class="anchor" href="#%e5%8d%95%e4%be%8b%e6%a8%a1%e5%bc%8f"&gt;#&lt;/a&gt;
 
&lt;/h1&gt;
&lt;p&gt;Singleton&lt;/p&gt;
&lt;h5 id="实现方法"&gt;
 实现方法
 
 &lt;a class="anchor" href="#%e5%ae%9e%e7%8e%b0%e6%96%b9%e6%b3%95"&gt;#&lt;/a&gt;
 
&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;初始化时即创建单例
&lt;ul&gt;
&lt;li&gt;饿汉式&lt;/li&gt;
&lt;li&gt;枚举类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按需，延迟创建单例
&lt;ul&gt;
&lt;li&gt;懒汉式
&lt;ul&gt;
&lt;li&gt;基础实现&lt;/li&gt;
&lt;li&gt;同步锁&lt;/li&gt;
&lt;li&gt;双重检验锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;静态内部类实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="饿汉式线程安全"&gt;
 饿汉式（线程安全）
 
 &lt;a class="anchor" href="#%e9%a5%bf%e6%b1%89%e5%bc%8f%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8"&gt;#&lt;/a&gt;
 
&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;JVM 在类的初始化阶段 (即 在 Class 被加载后、被线程使用前)，会执行类的初始化&lt;/li&gt;
&lt;li&gt;在执行&lt;strong&gt;类的初始化期间，JVM 会去获取一个锁&lt;/strong&gt;，这个锁可以同步多个线程对同一个类的初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Singleton&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 1. 加载该类时，单例就会自动被创建&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; Singleton ourInstance &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Singleton();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 2. 构造函数设置为 私有权限，禁止他人创建实例&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Singleton&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 3. 通过调用静态方法获得创建的单例&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; Singleton &lt;span style="color:#a6e22e"&gt;newInstance&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; ourInstance;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单例对象要求初始化速度快，占用内存小&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="枚举类线程安全"&gt;
 枚举类（线程安全）
 
 &lt;a class="anchor" href="#%e6%9e%9a%e4%b8%be%e7%b1%bb%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8"&gt;#&lt;/a&gt;
 
&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;这是最简洁，最易用的单例实现方式&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class='book-hint '&gt;
 &lt;p&gt;单元素的枚举类型已经成为实现 Singleton 的最佳方法
- 《Effective Java》&lt;/p&gt;</description></item></channel></rss>