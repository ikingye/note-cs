<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>其他模式 on 计算机学习笔记</title><link>https://kingye.me/note-cs/docs/direction/se/design-pattern/other/</link><description>Recent content in 其他模式 on 计算机学习笔记</description><generator>Hugo</generator><language>en</language><atom:link href="https://kingye.me/note-cs/docs/direction/se/design-pattern/other/index.xml" rel="self" type="application/rss+xml"/><item><title>简单工厂</title><link>https://kingye.me/note-cs/docs/direction/se/design-pattern/other/simple-factory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/other/simple-factory/</guid><description>&lt;h1 id="简单工厂模式"&gt;
 简单工厂模式
 &lt;a class="anchor" href="#%e7%ae%80%e5%8d%95%e5%b7%a5%e5%8e%82%e6%a8%a1%e5%bc%8f"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Simple Factory Pattern，又称为静态工厂方法 (Static Factory Method) 模式&lt;/p&gt;
&lt;p&gt;通过&lt;strong&gt;传入参数&lt;/strong&gt;获取到对象，不关心创建对象的细节。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// create 是静态方法，直接用类调用（不需要实例化）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;object1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Factory.&lt;span style="color:#a6e22e"&gt;create&lt;/span&gt;(1);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;object2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Factory.&lt;span style="color:#a6e22e"&gt;create&lt;/span&gt;(2);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将创建实例的工作与使用实例的工作分开，使用者不必关心类对象如何创建，实现了解耦；&lt;/li&gt;
&lt;li&gt;把初始化实例时的工作放到工厂里进行，使代码更容易维护。更符合面向对象的原则 &amp;amp; 面向接口编程，而不是面向实现编程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工厂类集中了所有实例（产品）的创建逻辑，一旦这个工厂不能正常工作，整个系统都会受到影响；&lt;/li&gt;
&lt;li&gt;违背 “开放 - 关闭原则”，一旦添加新产品就不得不修改工厂类的逻辑，这样就会造成工厂逻辑过于复杂。&lt;/li&gt;
&lt;li&gt;简单工厂模式由于使用了静态工厂方法，静态方法不能被继承和重写，会造成工厂角色无法形成基于继承的等级结构。&lt;/li&gt;
&lt;li&gt;静态方法可以被继承&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户如果只知道传入工厂类的参数，对于如何创建对象的逻辑不关心时；&lt;/li&gt;
&lt;li&gt;当工厂类负责创建的对象（具体产品）比较少时。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="代码示例"&gt;
 代码示例
 &lt;a class="anchor" href="#%e4%bb%a3%e7%a0%81%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;div class="book-tabs"&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-0" checked="checked" /&gt;
&lt;label for="tabs-code-0"&gt;C&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```c

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-1" /&gt;
&lt;label for="tabs-code-1"&gt;C&amp;#43;&amp;#43;&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```c++

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-2" /&gt;
&lt;label for="tabs-code-2"&gt;C#&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```c#

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-3" /&gt;
&lt;label for="tabs-code-3"&gt;Go&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```go

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-4" /&gt;
&lt;label for="tabs-code-4"&gt;Java&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```java

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-5" /&gt;
&lt;label for="tabs-code-5"&gt;JavaScript&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```javascript

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-6" /&gt;
&lt;label for="tabs-code-6"&gt;Kotlin&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```kotlin

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-7" /&gt;
&lt;label for="tabs-code-7"&gt;PHP&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```php

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-8" /&gt;
&lt;label for="tabs-code-8"&gt;Python2&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```python

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-9" /&gt;
&lt;label for="tabs-code-9"&gt;Python3&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```python

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-10" /&gt;
&lt;label for="tabs-code-10"&gt;Ruby&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```ruby

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-11" /&gt;
&lt;label for="tabs-code-11"&gt;Rust&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```rust

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-12" /&gt;
&lt;label for="tabs-code-12"&gt;Scala&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```scala

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-13" /&gt;
&lt;label for="tabs-code-13"&gt;Swift&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```swift

```

&lt;/div&gt;


---


&lt;input type="radio" class="toggle" name="tabs-code" id="tabs-code-14" /&gt;
&lt;label for="tabs-code-14"&gt;TypeScript&lt;/label&gt;
&lt;div class="book-tabs-content markdown-inner"&gt;

```typescript

```

&lt;/div&gt;


---


&lt;/div&gt;</description></item></channel></rss>