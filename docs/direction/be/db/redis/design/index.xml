<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>第二部分 设计 on 计算机学习笔记</title><link>https://kingye.me/note-cs/docs/direction/be/db/redis/design/</link><description>Recent content in 第二部分 设计 on 计算机学习笔记</description><generator>Hugo</generator><language>en</language><atom:link href="https://kingye.me/note-cs/docs/direction/be/db/redis/design/index.xml" rel="self" type="application/rss+xml"/><item><title>锁</title><link>https://kingye.me/note-cs/docs/direction/be/db/redis/design/lock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/note-cs/docs/direction/be/db/redis/design/lock/</guid><description>&lt;h1 id="锁"&gt;
 锁
 &lt;a class="anchor" href="#%e9%94%81"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id="setnx"&gt;
 setnx
 &lt;a class="anchor" href="#setnx"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;setnx&lt;/li&gt;
&lt;li&gt;msetnx&lt;/li&gt;
&lt;li&gt;hsetnx&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;SET key value &lt;span style="color:#f92672"&gt;[&lt;/span&gt;EX seconds|PX milliseconds&lt;span style="color:#f92672"&gt;]&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt;NX|XX&lt;span style="color:#f92672"&gt;]&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt;KEEPTTL&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么删除锁的正确姿势之一，就是可以使用 lua 脚本，通过 redis 的 eval/evalsha 命令来运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-lua" data-lang="lua"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;-- lua删除锁：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;-- KEYS和ARGV分别是以集合方式传入的参数，对应上文的Test和uuid。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;-- 如果对应的value等于传入的uuid。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; redis.call(&lt;span style="color:#e6db74"&gt;&amp;#39;get&amp;#39;&lt;/span&gt;, KEYS[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]) &lt;span style="color:#f92672"&gt;==&lt;/span&gt; ARGV[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;-- 执行删除操作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; redis.call(&lt;span style="color:#e6db74"&gt;&amp;#39;del&amp;#39;&lt;/span&gt;, KEYS[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;-- 不成功，返回0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过 lua 脚本能保证原子性的原因说的通俗一点：&lt;/p&gt;
&lt;p&gt;就算你在 lua 里写出花，执行也是一个命令 (eval/evalsha) 去执行的，一条命令没执行完，其他客户端是看不到的。&lt;/p&gt;
&lt;p&gt;那么既然这么麻烦，有没有比较好的工具呢？就要说到 &lt;code&gt;redisson&lt;/code&gt; 了。&lt;/p&gt;
&lt;h2 id="redlock"&gt;
 redLock
 &lt;a class="anchor" href="#redlock"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;并非是一个工具，而是 redis 官方提出的一种分布式锁的算法。&lt;/p&gt;
&lt;h2 id="redisson"&gt;
 redisson
 &lt;a class="anchor" href="#redisson"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Redisson 是 java 的 redis 客户端之一，提供了一些 api 方便操作 redis。&lt;/p&gt;</description></item></channel></rss>