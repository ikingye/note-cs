<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>第二部分 设计 on 计算机学习笔记</title><link>https://kingye.me/note-cs/docs/direction/be/db/redis/design/</link><description>Recent content in 第二部分 设计 on 计算机学习笔记</description><generator>Hugo</generator><language>en</language><atom:link href="https://kingye.me/note-cs/docs/direction/be/db/redis/design/index.xml" rel="self" type="application/rss+xml"/><item><title>锁</title><link>https://kingye.me/note-cs/docs/direction/be/db/redis/design/lock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/note-cs/docs/direction/be/db/redis/design/lock/</guid><description>&lt;h1 id="锁">
 锁
 &lt;a class="anchor" href="#%e9%94%81">#&lt;/a>
&lt;/h1>
&lt;h2 id="setnx">
 setnx
 &lt;a class="anchor" href="#setnx">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>setnx&lt;/li>
&lt;li>msetnx&lt;/li>
&lt;li>hsetnx&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>SET key value &lt;span style="color:#f92672">[&lt;/span>EX seconds|PX milliseconds&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>NX|XX&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>KEEPTTL&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么删除锁的正确姿势之一，就是可以使用 lua 脚本，通过 redis 的 eval/evalsha 命令来运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- lua删除锁：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- KEYS和ARGV分别是以集合方式传入的参数，对应上文的Test和uuid。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- 如果对应的value等于传入的uuid。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> redis.call(&lt;span style="color:#e6db74">&amp;#39;get&amp;#39;&lt;/span>, KEYS[&lt;span style="color:#ae81ff">1&lt;/span>]) &lt;span style="color:#f92672">==&lt;/span> ARGV[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- 执行删除操作&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> redis.call(&lt;span style="color:#e6db74">&amp;#39;del&amp;#39;&lt;/span>, KEYS[&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- 不成功，返回0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 lua 脚本能保证原子性的原因说的通俗一点：&lt;/p>
&lt;p>就算你在 lua 里写出花，执行也是一个命令 (eval/evalsha) 去执行的，一条命令没执行完，其他客户端是看不到的。&lt;/p>
&lt;p>那么既然这么麻烦，有没有比较好的工具呢？就要说到 &lt;code>redisson&lt;/code> 了。&lt;/p>
&lt;h2 id="redlock">
 redLock
 &lt;a class="anchor" href="#redlock">#&lt;/a>
&lt;/h2>
&lt;p>并非是一个工具，而是 redis 官方提出的一种分布式锁的算法。&lt;/p>
&lt;h2 id="redisson">
 redisson
 &lt;a class="anchor" href="#redisson">#&lt;/a>
&lt;/h2>
&lt;p>Redisson 是 java 的 redis 客户端之一，提供了一些 api 方便操作 redis。&lt;/p></description></item></channel></rss>