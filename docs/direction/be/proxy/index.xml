<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>代理 on 计算机学习笔记</title>
    <link>https://ikingye.github.io/note-cs/docs/direction/be/proxy/</link>
    <description>Recent content in 代理 on 计算机学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/note-cs/docs/direction/be/proxy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>BFE</title>
      <link>https://ikingye.github.io/note-cs/docs/direction/be/proxy/bfe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note-cs/docs/direction/be/proxy/bfe/</guid>
      <description>BFE #  baidu/bfe Baidu Front End 百度统一前端
统一的百度七层（HTTP）流量接入平台
BFE 之前的百度前端接入架构 #  流量从 BGW 接入之后直接到达了产品线的前端服务器， 这些服务器种类繁多，几乎包涵了现在流行的各种 webserver，比如 nginx,apache,lighttpd 等， 不同的服务器经过后端不同业务逻辑的处理之后打印日志内容并且将响应发送给用户。
开发成本高 #  如果前端多个产品线需要实现一个通用功能，比如防攻击或者 IP 地域识别，需要开发不同的 webserver 模块，虽然每个模块的功能一样，但实现方式完全不同，所以存在一定的重复开发和人力资源浪费。
维护成本高 #  不同的产品线和模块都需要一定的人力来维护。前端接入服务器类型多样，实现和原理各异，出现问题的概率大，Nginx, apache 等服务器比较稳定，高效，但是如果产品线出现强烈的个性化业务需求或者严重 BUG，开源社区很难提供及时有效的技术支持。
数据和策略共享的成本高 #  产品线间维护不同的前端接入模块，策略和经验很难做到有效的分享。
技术积累难 #  由于产品线间沟通和分享的成本大，很多经验和成果并没有得到有效的积累。
 BFE 架构 #  BFE 是一个七层接入系统。 它的最基本工作就是接收用户数据，解析 HTTP 请求，对内容进行过滤和分析之后再转发给后端产品线。
BFE 最基本的工作就是从 BGW/BVS 接入流量并将流量转发给产品线的前端 webserver 或者其他接入模块，最后接收后端 server 的内容并回复给外部用户。
反向代理服务器 #  BFE 本质上是一个反向代理服务器，每天承接百度数百亿的流量，高峰期的集群 QPS 有一百多万。 在如此大的流量压力环境中，服务器的处理性能至关重要。 BFE 采用现在业界流行的多进程全异步非阻塞事件驱动模型， 但由于业务功能繁多，产品线策略及规则复杂，任何一个开源的代理服务器比如 nginx, squid, varnish 的性能都很难满足需求。 BFE 本身也需要不断优化，降低系统资源开销，提升处理性能。</description>
    </item>
    
    <item>
      <title>BGW</title>
      <link>https://ikingye.github.io/note-cs/docs/direction/be/proxy/bgw/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note-cs/docs/direction/be/proxy/bgw/</guid>
      <description>BGW #  Baidu Gate Way 百度智能网关 是一种用软件实现的负载均衡设备。
BGW 将多台 server（即 RealServer）虚拟化成了一台 server，提供统一的 VIP（即 virtual ip），用户只需和 VIP 进行通讯，就能访问 RealServer 上的服务。
最终， 从 client 的角度看到，自己和一台 server 机器（确切说是一个 ip）在通讯，感觉不到 RealServer 的存在； 从 RealServer 的角度看到，自己和 client 在通讯，没有感觉到 BGW 的存在。
TTM 模块 #  BGW 会对报文做 SNAT 和 DNAT，这样 RS（RealServer）看到的源 IP 将是 BGW 的后端 IP，而不是客户端的真实 IP， 而现实中有许多业务需要知道客户端的真实 IP。
为了解决这个问题，RS 需要在内核加载一个 TTM 模块，即可将该选项携带的真实 IP 信息获取出来， 该过程对于用户态应用程序来说是完全透明的，用户态应用程序所看到的是从客户端真实 IP，实现 BGW 的透明。</description>
    </item>
    
    <item>
      <title>OpenResty</title>
      <link>https://ikingye.github.io/note-cs/docs/direction/be/proxy/openresty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note-cs/docs/direction/be/proxy/openresty/</guid>
      <description>OpenResty #  openresty/openresty 参考：
 OpenResty 究竟解决了什么痛点？   教程 #  参考：
 Programming OpenResty - 章亦春 OpenResty 最佳实践  </description>
    </item>
    
  </channel>
</rss>