<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>make on 计算机学习笔记</title><link>https://kingye.me/note-cs/docs/basic/compile/make/</link><description>Recent content in make on 计算机学习笔记</description><generator>Hugo</generator><language>en</language><atom:link href="https://kingye.me/note-cs/docs/basic/compile/make/index.xml" rel="self" type="application/rss+xml"/><item><title>makefile</title><link>https://kingye.me/note-cs/docs/basic/compile/make/makefile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/note-cs/docs/basic/compile/make/makefile/</guid><description>&lt;h1 id="makefile">
 makefile
 &lt;a class="anchor" href="#makefile">#&lt;/a>
&lt;/h1>
&lt;p>make 不带参数，只会执行 makefile 中第一条 &lt;code>target 声明&lt;/code>（带冒号的语句）&lt;/p>
&lt;h2 id="简介">
 简介
 &lt;a class="anchor" href="#%e7%ae%80%e4%bb%8b">#&lt;/a>
&lt;/h2>
&lt;p>Makefile 用于定义如何创建目标文件，比如如何从源码到可执行文件。
创建这一工具的目标是 减少不必要的编译或者任务。
传说 &lt;a href="https://en.wikipedia.org/wiki/Stuart_Feldman">Stuart Feldman&lt;/a> 在 1976 年花了一个周末写出来的， 而今仍然使用广泛，特别是在 Unix 和 Linux 系统上。&lt;/p>
&lt;h2 id="基础">
 基础
 &lt;a class="anchor" href="#%e5%9f%ba%e7%a1%80">#&lt;/a>
&lt;/h2>
&lt;h3 id="语法">
 语法
 &lt;a class="anchor" href="#%e8%af%ad%e6%b3%95">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>注释：&lt;code>#&lt;/code>&lt;/li>
&lt;li>文件名： 必须是 &lt;code>Makefile&lt;/code>
&lt;ul>
&lt;li>&lt;strong>区分大小写&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>make &amp;lt;target&amp;gt;&lt;/code> 生成 target
&lt;ul>
&lt;li>重命名：&lt;code>make -f &amp;quot;filename&amp;quot; &amp;lt;target&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>只认识 &lt;code>TAB&lt;/code>&lt;/strong>，不认识空格
&lt;ul>
&lt;li>但是在 GNU Make 3.82 之后, 可以通过设置参数 &lt;code>.RECIPEPREFIX&lt;/code> 进行修改&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>shell 符号
&lt;ul>
&lt;li>&lt;code>@&lt;/code>：不把命令打印到 stdout&lt;/li>
&lt;li>&lt;code>-&lt;/code>：发生错误了也没关系&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.gnu.org/software/make/manual/html_node/Variables-in-Recipes.html">&lt;code>$$&lt;/code>&lt;/a>
&lt;ul>
&lt;li>&lt;code>$&lt;/code> 是 make 变量&lt;/li>
&lt;li>&lt;code>$$&lt;/code> 是 shell 变量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="target-声明">
 target 声明
 &lt;a class="anchor" href="#target-%e5%a3%b0%e6%98%8e">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>创建一个 &lt;code>target&lt;/code>：
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">targets &lt;/span>&lt;span style="color:#f92672">:&lt;/span> prerequisites
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> recipe
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>prerequisites&lt;/code>(依赖) 是可选的, &lt;code>recipe&lt;/code>(做法) 也可以多个或者不给
&lt;ul>
&lt;li>没有给 prerequisites, 只会在目标文件文件不存在时执行&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>targets 和 prerequisites 都可以是多个, 以空格分割
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">file2.txt file3.txt&lt;/span>&lt;span style="color:#f92672">:&lt;/span> file0.txt file1.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> touch file2.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> touch file3.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>target 的&lt;strong>声明顺序不重要&lt;/strong>
&lt;ul>
&lt;li>上面的依赖可以下面再声明&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如果声明重复的 &lt;code>target&lt;/code>，make 会给一个 warning，&lt;strong>后面会覆盖前面的&lt;/strong>
&lt;ul>
&lt;li>但是如果&lt;strong>不定义任何 recipe&lt;/strong>, 就不会冲突, 只是多了依赖关系
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">file2.txt&lt;/span>&lt;span style="color:#f92672">:&lt;/span> file0.txt file3.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Phony&lt;/code>(假的) Targets
&lt;ul>
&lt;li>意思是 tagets 并不是文件, 可以想象成一个任务的名字而已&lt;/li>
&lt;li>因为不是文件, 无法比对是否有更新, 所以每次 &lt;code>make&lt;/code> 都会执行&lt;/li>
&lt;li>&lt;strong>依赖于 phony target 的 target 也会每次 make 都执行&lt;/strong>, 即使 target 是文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>.PHONY&lt;/code>
&lt;ul>
&lt;li>如果定义的 phony target 与文件名重名, 可以用 .PHONY 显式地指明哪些 targets 是 phony&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5 id="常用-phony-target">
 常用 phony target
 &lt;a class="anchor" href="#%e5%b8%b8%e7%94%a8-phony-target">#&lt;/a>
&lt;/h5>
&lt;ul>
&lt;li>&lt;code>all&lt;/code>&lt;/li>
&lt;li>&lt;code>clean&lt;/code>&lt;/li>
&lt;li>&lt;code>install&lt;/code>&lt;/li>
&lt;li>&lt;code>uninstall&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="变量与通配符">
 变量与通配符
 &lt;a class="anchor" href="#%e5%8f%98%e9%87%8f%e4%b8%8e%e9%80%9a%e9%85%8d%e7%ac%a6">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>&lt;code>$^&lt;/code>: 代表 prerequisites
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 即便分开定义依赖, $^ 依然能拿到
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">process&lt;/span>&lt;span style="color:#f92672">:&lt;/span> file*.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 非常智能的, ex1.txt 会被找到, file0.txt 会被去重
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">process&lt;/span>&lt;span style="color:#f92672">:&lt;/span> ex1.txt file0.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @echo $^
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;code>$@&lt;/code>: 代表 target, 如果 target 为多个, &lt;code>$@&lt;/code> 代表当前执行的那个&lt;/li>
&lt;li>&lt;code>$&amp;lt;&lt;/code>: prerequisite 中的第一个&lt;/li>
&lt;li>&lt;code>$?&lt;/code>: 需要更新的 prerequisite 文件列表&lt;/li>
&lt;li>&lt;code>$+&lt;/code>: 所有依赖, 包括重复的&lt;/li>
&lt;li>&lt;code>$|&lt;/code>: 竖线后面的 &lt;code>order-only prerequisites&lt;/code>&lt;/li>
&lt;li>&lt;code>$*&lt;/code>: &lt;code>target&lt;/code> &lt;code>%&lt;/code> 那部分, 包括路径
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">a.%.b&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># $* match 的target % 那部分, 包括路径, 比如 `make dir/a.foo.b` 会打出 `dir/foo`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @echo $*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="模式匹配">
 模式匹配
 &lt;a class="anchor" href="#%e6%a8%a1%e5%bc%8f%e5%8c%b9%e9%85%8d">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>make 会找到最具体的匹配
&lt;ul>
&lt;li>&lt;code>make small/foo.png&lt;/code> 则会匹配下面这个规则（在这之前要先有 small/foo.svg 这个文件）
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">%.png&lt;/span>&lt;span style="color:#f92672">:&lt;/span> %.svg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inkscape --export-png $^
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">small/%.png&lt;/span>&lt;span style="color:#f92672">:&lt;/span> %.svg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inkscape --export-png --export-dpi &lt;span style="color:#ae81ff">30&lt;/span> $^
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>make 已经有一些内置的规则, 比如从 _.c 到 _.o&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="竖线">
 竖线
 &lt;a class="anchor" href="#%e7%ab%96%e7%ba%bf">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>竖线左边为：正常前提目标（&lt;code>Normal Prerequisites&lt;/code>）
&lt;ul>
&lt;li>当正常前提目标变化时，target 重新生成&lt;/li>
&lt;li>可以为空&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>竖线右边为：命令前提目标（&lt;code>order-only Prerequisites&lt;/code>）
&lt;ul>
&lt;li>当命令前提目标变化时，target &lt;strong>不&lt;/strong>重新生成&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">process&lt;/span>&lt;span style="color:#f92672">:&lt;/span> file*.txt | dir/a.foo.b
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h4 id="变量">
 变量
 &lt;a class="anchor" href="#%e5%8f%98%e9%87%8f">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>变量都是字符串类型&lt;/p></description></item><item><title>cmake</title><link>https://kingye.me/note-cs/docs/basic/compile/make/cmake/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/note-cs/docs/basic/compile/make/cmake/</guid><description>&lt;h1 id="cmake">
 cmake
 &lt;a class="anchor" href="#cmake">#&lt;/a>
&lt;/h1>
&lt;p>推荐 xmake&lt;/p>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.zhihu.com/question/493402906">CMake 是不是阻碍了 C++的发展?&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>