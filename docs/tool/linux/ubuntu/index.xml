<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>4.2.1 Ubuntu on 计算机学习笔记</title>
    <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/</link>
    <description>Recent content in 4.2.1 Ubuntu on 计算机学习笔记</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://kingye.me/note-cs/docs/tool/linux/ubuntu/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cargo</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/cargo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/cargo/</guid>
      <description>Cargo #  常用命令 #  安装配置 #  curl https://sh.rustup.rs -sSf | sh
参考：
 The Cargo Book  </description>
    </item>
    
    <item>
      <title>k3d</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/k3d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/k3d/</guid>
      <description>k3d #  rancher/k3d 常用命令 #  k3d cluster create ecsp-test-1 --subnet &amp;#34;172.27.1.0/24&amp;#34; --api-port 10.232.205.41:8701 --servers 1 --agents 2 k3d cluster create ecsp-test-2 --subnet &amp;#34;172.27.2.0/24&amp;#34; --api-port 10.232.205.41:8702 k3d cluster create ecsp-test-3 --subnet &amp;#34;172.27.3.0/24&amp;#34; --api-port 10.232.205.41:8703 k3d cluster create ecsp-test-4 --subnet &amp;#34;172.27.4.0/24&amp;#34; --api-port 10.232.205.41:8704 k3d cluster create ecsp-test-5 --subnet &amp;#34;172.27.5.0/24&amp;#34; --api-port 10.232.205.41:8705  # yq01 k3d cluster create ecsp-edge-1 --subnet &amp;#34;172.27.1.0/24&amp;#34; --api-port 10.197.34.39:8001 --image rancher/k3s:v1.18.19-k3s1 --k3s-server-arg &amp;#39;--kube-apiserver-arg=service-node-port-range=8100-8199&amp;#39; -p &amp;#34;8100-8199:8100-8199@loadbalancer&amp;#34; --verbose k3d cluster create ecsp-edge-2 --subnet &amp;#34;172.</description>
    </item>
    
    <item>
      <title>KubeSphere</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/kubesphere/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/kubesphere/</guid>
      <description>KubeSphere #   kubectl patch storageclass local-storage -p &amp;#39;{&amp;#34;metadata&amp;#34;: {&amp;#34;annotations&amp;#34;:{&amp;#34;storageclass.kubernetes.io/is-default-class&amp;#34;:&amp;#34;true&amp;#34;}}}&amp;#39; </description>
    </item>
    
    <item>
      <title>MicroK8s</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/microk8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/microk8s/</guid>
      <description>MicroK8s #  ubuntu/microk8s MicroK8s is a small, fast, single-package Kubernetes for developers, IoT and edge.
https://microk8s.io
安装 #  # snap install microk8s --classic snap install microk8s --classic --channel=1.23/stable  # 拉镜像 microk8s ctr image pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 microk8s ctr image tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 k8s.gcr.io/pause:3.1  microk8s enable dashboard dns ingress  echo &amp;#34;alias k=kubectl&amp;#34; &amp;gt;&amp;gt; ~/.zshrc echo &amp;#34;export PATH=\$PATH:/snap/bin&amp;#34; &amp;gt;&amp;gt; ~/.zshrc zsh  mkdir -p ~/.kube microk8s config &amp;gt; ~/.kube/config  snap install kubectl --classic --channel=1.</description>
    </item>
    
    <item>
      <title>Multipass</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/multipass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/multipass/</guid>
      <description>Multipass #  canonical/multipass Multipass orchestrates virtual Ubuntu instances https://multipass.run
# 安装 snap install multipass  # Find available images multipass find  # 使用本地 image multipass launch --name k3s --mem 1G --disk 5G file://~/ubuntu-20.04-server-cloudimg-amd64.img  # 默认就是 cpus 1, mem 1G, disk 5G # 参考：https://multipass.run/docs/launch-command multipass launch --name rd-node-1 --cpus 10 --mem 20G --disk 20G multipass launch --name rd-node-2 --cpus 10 --mem 20G --disk 20G multipass launch --name qa-node-1 --cpus 10 --mem 20G --disk 20G multipass launch --name qa-node-2 --cpus 10 --mem 20G --disk 20G multipass launch --name qa-node-3 --cpus 10 --mem 20G --disk 20G  # 挂载 multipass mount /home/work/ecsp/deploy/ecsp-edge rd-node-1:/home/work/host multipass mount /home/work/ecsp/deploy/ecsp-edge rd-node-2:/home/work/host multipass mount /home/work/ecsp/deploy/ecsp-edge qa-node-1:/home/work/host multipass mount /home/work/ecsp/deploy/ecsp-edge qa-node-2:/home/work/host multipass mount /home/work/ecsp/deploy/ecsp-edge qa-node-3:/home/work/host  # 为 VM 启动一个 shell multipass shell rd-node-1 multipass shell rd-node-2 multipass shell qa-node-1 multipass shell qa-node-2 multipass shell qa-node-3  # 安装需要的 sudo su apt update apt install net-tools selinux-utils  # 删除 # Delete instances multipass delete ecsp-node-1 multipass delete ecsp-node-2 # Purge all deleted instances permanently multipass purge 网络 #  使用的是桥接模式，因为：</description>
    </item>
    
    <item>
      <title>pyenv</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/pyenv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/pyenv/</guid>
      <description>pyenv/pyenv 安装 #  git clone https://github.com/pyenv/pyenv.git ~/.pyenv  echo &amp;#39;export PYENV_ROOT=&amp;#34;$HOME/.pyenv&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc echo &amp;#39;command -v pyenv &amp;gt;/dev/null || export PATH=&amp;#34;$PYENV_ROOT/bin:$PATH&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc echo &amp;#39;eval &amp;#34;$(pyenv init -)&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc  # 使用 taobao 的 npm 源 cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; ~/.zshrc function pyenvinstall { wget -c https://npm.taobao.org/mirrors/python/\$@/Python-\$@.tar.xz -P ~/.pyenv/cache/ pyenv install \$@ } EOF 安装依赖 #  之后才能编译 python 成功
sudo apt update sudo apt install -y \  gcc \  build-essential \  curl \  libbz2-dev \  libffi-dev \  liblzma-dev \  libncursesw5-dev \  libreadline-dev \  libsqlite3-dev \  libssl-dev \  libxml2-dev \  libxmlsec1-dev \  llvm \  make \  tk-dev \  wget \  xz-utils \  zlib1g-dev  使用 #  # 安装 pyenv install 3.</description>
    </item>
    
    <item>
      <title>zsh</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/zsh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/zsh/</guid>
      <description>zsh #  oh-my-zsh #  安装
sh -c &amp;#34;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34;  sh -c &amp;#34;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&amp;#34; cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; ~/.zshrc export PROMPT=&amp;#39;%{$fg[magenta]%}%(?..%?%1v)%n@%{$fg[green]%}%M:%{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)&amp;#39; EOF </description>
    </item>
    
  </channel>
</rss>
