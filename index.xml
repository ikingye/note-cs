<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>首页 on 计算机学习笔记</title>
    <link>https://kingye.me/note-cs/</link>
    <description>Recent content in 首页 on 计算机学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://kingye.me/note-cs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ps</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/shell/command/ps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/shell/command/ps/</guid>
      <description> ps # </description>
    </item>
    <item>
      <title>Quick Start</title>
      <link>https://kingye.me/note-cs/docs/direction/be/db/mysql/basic/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/db/mysql/basic/quick-start/</guid>
      <description> Quick Start # Mysql Client # /etc/my.cnf&#xA;Mysql Server # </description>
    </item>
    <item>
      <title>sh</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/shell/type/sh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/shell/type/sh/</guid>
      <description>sh # 标记为 #!/bin/sh 的脚本不应使用任何 POSIX 没有规定的特性 (如 let 等命令，但 #!/bin/bash 可以)。</description>
    </item>
    <item>
      <title>Vim 实用技巧（第 2 版）</title>
      <link>https://kingye.me/note-cs/docs/study/book/others/practical-vim/zh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/book/others/practical-vim/zh/</guid>
      <description>Vim 实用技巧（第 2 版） # 译者 # 杨源 / 车文隆</description>
    </item>
    <item>
      <title>快速上手</title>
      <link>https://kingye.me/note-cs/docs/direction/be/db/postgresql/basic/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/db/postgresql/basic/quick-start/</guid>
      <description>PostgreSQL 快速上手 # 安装 # MacOS # 安装：brew install postgresql 启动：brew services start postgresql 创建用户名数据库：createdb 基础命令 # 登录 PostgreSQL 控制台：psql # psql -U [user] -d [database] -h [host] -p [port]&#xA;默认 psql&#xA;user：当前mac用户 database：用户同名数据库 主机：localhost 端口号：5432，postgresql的默认端口是5432 \l # 使用 \l 命令列出所有的数据库，看到已存在用户同名数据库、postgres 数据库。 但是 postgres 数据库的所有者是当前用户，没有 postgres 用户。&#xA;创建 postgres 用户：CREATE USER postgres WITH PASSWORD &#39;password&#39;; 删除默认生成的 postgres 数据库：DROP DATABASE postgres; 创建属于 postgres 用户的 postgres 数据库：CREATE DATABASE postgres OWNER postgres; 将数据库所有权限赋予 postgres 用户：GRANT ALL PRIVILEGES ON DATABASE postgres to postgres; 给 postgres 用户添加创建数据库的属性：ALTER ROLE postgres CREATEDB; 常用控制台命令 # \password：设置当前登录用户的密码 \h：查看SQL命令的解释，比如\h select。 \?</description>
    </item>
    <item>
      <title>Bash</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/shell/type/bash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/shell/type/bash/</guid>
      <description> Bash # </description>
    </item>
    <item>
      <title>hugo-academic</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/tool/note/hugo/theme/academic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/tool/note/hugo/theme/academic/</guid>
      <description>Academic # 配置 # 写博客 # hugo new &amp;ndash;kind post post/my-post</description>
    </item>
    <item>
      <title>makefile</title>
      <link>https://kingye.me/note-cs/docs/basic/compile/make/makefile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/compile/make/makefile/</guid>
      <description>makefile # make 不带参数，只会执行 makefile 中第一条 target 声明（带冒号的语句）&#xA;简介 # Makefile 用于定义如何创建目标文件，比如如何从源码到可执行文件。 创建这一工具的目标是 减少不必要的编译或者任务。 传说 Stuart Feldman 在 1976 年花了一个周末写出来的， 而今仍然使用广泛，特别是在 Unix 和 Linux 系统上。&#xA;基础 # 语法 # 注释：# 文件名： 必须是 Makefile 区分大小写 make &amp;lt;target&amp;gt; 生成 target 重命名：make -f &amp;quot;filename&amp;quot; &amp;lt;target&amp;gt; 只认识 TAB，不认识空格 但是在 GNU Make 3.82 之后, 可以通过设置参数 .RECIPEPREFIX 进行修改 shell 符号 @：不把命令打印到 stdout -：发生错误了也没关系 $$ $ 是 make 变量 $$ 是 shell 变量 target 声明 # 创建一个 target： targets : prerequisites recipe prerequisites(依赖) 是可选的, recipe(做法) 也可以多个或者不给 没有给 prerequisites, 只会在目标文件文件不存在时执行 targets 和 prerequisites 都可以是多个, 以空格分割 file2.</description>
    </item>
    <item>
      <title>markdown 公式</title>
      <link>https://kingye.me/note-cs/docs/study/skill/type/markdown/formula/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/type/markdown/formula/</guid>
      <description>\(\) markdown 公式 # 来源：一文学会在 Markdown 中编辑数学符号与公式&#xA;行内公式：将公式插入到本行内 我在 1 年后：$0.99^{365} \approx 0.02551796$&#xA;$0.99^{365} \approx 0.02551796$ 单独的公式块：将公式插入到新的一行内，并且居中 观众老爷们在 1 年后：&#xA;$$ 1.01^{365} \approx 37.78343433 $$&#xA;$$ 1.01^{365} \approx 37.78343433 $$ 符号 # 上下标、运算符 # 显示效果 markdown 公式语法 上标 $x^2、 x^y 、e^{365}$ x^2、 x^y 、e^{365} 下标 $x_0、a_1、Y_a$ x_0、a_1、Y_a 分式 $\frac{x}{y}、\frac{1}{x+1}$ \frac{x}{y}、\frac{1}{x+1} 乘 $\times$ \times 除 $\div$ \div 加减 $\pm$ \pm 减加 $\mp$ \mp 求和 $\sum$ \sum 求和上下标 $\sum_0^3 、\sum_0^{\infty} 、\sum_{-\infty}^{\infty}$ \sum_0^3 、\sum_0^{\infty} 、\sum_{-\infty}^{\infty} 求积 $\prod$ \prod 微分 $\partial$ \partial 积分 $\int 、\displaystyle\int$ \int 、\displaystyle\int 不等于 $\neq$ \neq 大于等于 $\geq$ \geq 小于等于 $\leq$ \leq 约等于 $\approx$ \approx 不大于等于 $x+y \ngeq z$ x+y \ngeq z 点乘 $a \cdot b$ a \cdot b 星乘 $a \ast b$ a \ast b 取整函数 $\left \lfloor \frac{a}{b} \right \rfloor$ \left \lfloor \frac{a}{b} \right \rfloor 取顶函数 $\left \lceil \frac{c}{d} \right \rceil$ \left \lceil \frac{c}{d} \right \rceil 括号 # 显示效果 markdown 公式语法 圆括号（小括号） $\left( \frac{a}{b} \right)$ \left( \frac{a}{b} \right) 方括号（中括号） $\left[ \frac{a}{b} \right]$或者$[ \frac{x}{y} ]$ \left[ \frac{a}{b} \right]或者[ \frac{x}{y} ] 花括号（大括号） $\lbrace \frac{a}{b} \rbrace$ \lbrace \frac{a}{b} \rbrace 角括号 $\left \langle \frac{a}{b} \right \rangle$ \left \langle \frac{a}{b} \right \rangle 混合括号 $\left [ a,b \right )$ \left [ a,b \right ) 三角函数、指数、对数 # 显示效果 markdown 公式语法 sin $\sin(x)$ \sin(x) cos $\cos(x)$ \cos(x) tan $\tan(x)$ \tan(x) cot $\cot(x)$ \cot(x) log $\log_2 10$ \log_2 10 lg $\lg 100$ \lg 100 ln $\ln2$ \ln2 数学符号 # 显示效果 markdown 公式语法 无穷 $\infty$ \infty 矢量 $\vec{a}$ \vec{a} 一阶导数 $\dot{x}$ \dot{x} 二阶导数 $\ddot{x}$ \ddot{x} 算数平均值 $\bar{a}$ \bar{a} 概率分布 $\hat{a}$ \hat{a} 虚数 i、j $\imath、\jmath$ \imath、\jmath 省略号(一) $1,2,3,\ldots,n$ 1,2,3,\ldots,n 省略号(二) $x_1 + x_2 + \cdots + x_n$ x_1 + x_2 + \cdots + x_n 省略号(三) $\vdots$ \vdots 省略号(四) $\ddots$ \ddots 斜线与反斜线 $\left / \frac{a}{b} \right \backslash$ \left / \frac{a}{b} \right \backslash 上下箭头 $\left \uparrow \frac{a}{b} \right \downarrow$ \left \uparrow \frac{a}{b} \right \downarrow $\angle$ $\angle$ \angle $\prime$ $\prime$ \prime $\rightarrow$ $\rightarrow$ \rightarrow $\leftarrow$ $\leftarrow$ \leftarrow $\Rightarrow$ $\Rightarrow$ \Rightarrow $\Leftarrow$ $\Leftarrow$ \Leftarrow $\Uparrow$ $\Uparrow$ \Uparrow $\Downarrow$ $\Downarrow$ \Downarrow $\longrightarrow$ $\longrightarrow$ \longrightarrow $\longleftarrow$ $\longleftarrow$ \longleftarrow $\Longrightarrow$ $\Longrightarrow$ \Longrightarrow $\Longleftarrow$ $\Longleftarrow$ \Longleftarrow $\nabla$ $\nabla$ \nabla $\because$ $\because$ \because $\therefore$ $\therefore$ \therefore $\mid$ $\mid$ \mid $\backslash$ $\backslash$ \backslash $\forall$ $\forall$ \forall $\exists$ $\exists$ \exists $\backsim$ $\backsim$ \backsim $\cong$ $\cong$ \cong $\oint$ $\oint$ \oint $\implies$ $\implies$ \implies $\iff$ $\iff$ \iff $\impliedby$ $\impliedby$ \impliedby 连线符号 # 显示效果 markdown 公式语法 $\overleftarrow{a+b+c}$ \overleftarrow{a+b+c} $\overrightarrow{a+b+c}$ \overrightarrow{a+b+c} $\overleftrightarrow{a+b+c}$ \overleftrightarrow{a+b+c} $\underleftarrow{a+b+c}$ \underleftarrow{a+b+c} $\underrightarrow{a+b+c}$ \underrightarrow{a+b+c} $\underleftrightarrow{a+b+c}$ \underleftrightarrow{a+b+c} $\overline{a+b+c}$ \overline{a+b+c} $\underline{a+b+c}$ \underline{a+b+c} $\overbrace{a+b+c}^{Sample}$ \overbrace{a+b+c}^{Sample} $\underbrace{a+b+c}_{Sample}$ \underbrace{a+b+c}_{Sample} $\overbrace{a+\underbrace{b+c}_{1.</description>
    </item>
    <item>
      <title>Mixer</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/basic/arch/components/mixer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/basic/arch/components/mixer/</guid>
      <description>Mixer 基础 # Mixer 已弃用。&#xA;Mixer 所提供的功能已迁移至 Envoy 代理中。 在 Istio 中对 Mixer 的支持将截止到 Istio 1.7 发行版。&#xA;请参考 Telemetry V2，它取代了 Mixer 遥测。</description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/android/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/android/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/ios/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/ios/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/macos/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/macos/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/unix/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/unix/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/windows/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/windows/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/assembly/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/assembly/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/csharp/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/csharp/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/erlang/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/erlang/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/haskell/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/haskell/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/lua/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/lua/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/objective-c/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/objective-c/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/r/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/r/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/ruby/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/ruby/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/scala/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/scala/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/swift/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/swift/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/direction/be/db/mysql/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/db/mysql/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/direction/be/db/postgresql/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/db/postgresql/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/direction/be/db/redis/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/db/redis/appendix/interview/basic/</guid>
      <description> 基础面试题 # Redis 有哪些数据类型，分别适合什么场景？ # Redis 如何做持久化？ # Redis 如何实现高可用？ # Redis 如何与 Mysql 做一致性同步？ # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/direction/be/platform/nodejs/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/platform/nodejs/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/direction/client/android/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/client/android/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/direction/client/ios/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/client/ios/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/direction/client/xiaochengxu/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/client/xiaochengxu/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/direction/embedded/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/embedded/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/direction/fe/frame/angular/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/fe/frame/angular/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/direction/fe/frame/react/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/fe/frame/react/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/direction/fe/frame/vue/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/fe/frame/vue/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>基础</title>
      <link>https://kingye.me/note-cs/docs/direction/security/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/security/appendix/interview/basic/</guid>
      <description> 基础面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/android/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/android/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/ios/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/ios/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/macos/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/macos/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/unix/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/unix/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/windows/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/windows/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/assembly/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/assembly/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/csharp/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/csharp/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/erlang/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/erlang/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/haskell/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/haskell/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/lua/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/lua/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/objective-c/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/objective-c/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/r/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/r/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/ruby/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/ruby/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/scala/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/scala/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/swift/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/swift/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/direction/be/db/mysql/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/db/mysql/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/direction/be/db/postgresql/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/db/postgresql/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/direction/be/db/redis/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/db/redis/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/direction/be/platform/nodejs/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/platform/nodejs/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/direction/client/android/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/client/android/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/direction/client/ios/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/client/ios/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/direction/client/xiaochengxu/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/client/xiaochengxu/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/direction/embedded/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/embedded/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/direction/fe/frame/angular/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/fe/frame/angular/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/direction/fe/frame/react/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/fe/frame/react/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/direction/fe/frame/vue/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/fe/frame/vue/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>进阶</title>
      <link>https://kingye.me/note-cs/docs/direction/security/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/security/appendix/interview/advanced/</guid>
      <description> 进阶面试题 # </description>
    </item>
    <item>
      <title>配置</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/tool/note/hugo/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/tool/note/hugo/config/</guid>
      <description>Hugo 配置 # 参考：https://themes.gohugo.io/hugo-book</description>
    </item>
    <item>
      <title>cmake</title>
      <link>https://kingye.me/note-cs/docs/basic/compile/make/cmake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/compile/make/cmake/</guid>
      <description> cmake # 推荐 xmake&#xA;参考：&#xA;CMake 是不是阻碍了 C++的发展? </description>
    </item>
    <item>
      <title>hugo-book</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/tool/note/hugo/theme/hugo-book/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/tool/note/hugo/theme/hugo-book/</guid>
      <description> hugo-book # 参考 # https://github.com/alex-shpak/hugo-book https://themes.gohugo.io/hugo-book KaTeX/KaTeX TeX wiki </description>
    </item>
    <item>
      <title>kill</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/shell/command/kill/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/shell/command/kill/</guid>
      <description> kill # kill -9 与 kill 的区别 # kill 等于 kill -15，是安全的 TERM kill -9 是不安全的 SIGKILL kill aka kill -TERM aka kill -15 is the safe and correct way of terminating a process. It&amp;rsquo;s equivalent to safely shutting down a computer.&#xA;kill -9 is the unsafe way of brutally murdering a process. It&amp;rsquo;s equivalent to pulling the power cord, and may cause data corruption.&#xA;参考：&#xA;what-is-the-difference-between-kill-and-kill-9 what-is-the-purpose-of-the-9-option-in-the-kill-command Linux kill -9 和 kill -15 的区别 </description>
    </item>
    <item>
      <title>netcat</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/shell/command/netcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/shell/command/netcat/</guid>
      <description> netcat # netcat -u 127.0.0.1 9502 </description>
    </item>
    <item>
      <title>netstat</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/shell/command/netstat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/shell/command/netstat/</guid>
      <description> netstat # </description>
    </item>
    <item>
      <title>Pattern Recognition and Machine Learning</title>
      <link>https://kingye.me/note-cs/docs/study/book/ai/prml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/book/ai/prml/</guid>
      <description> Pattern Recognition and Machine Learning # </description>
    </item>
    <item>
      <title>Pilot</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/basic/arch/components/pilot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/basic/arch/components/pilot/</guid>
      <description> Pilot 基础 # 参考：&#xA;深入理解 Istio 核心组件之 Pilot 深入解读 Service Mesh 背后的技术细节 </description>
    </item>
    <item>
      <title>telnet</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/shell/command/telnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/shell/command/telnet/</guid>
      <description> telnet # 只能测试 tcp 端口连接&#xA;无法测试 udp 端口连接（可以用 netcat）&#xA;telnet domain/ip [port] telnet 退出 # 按 CTRL + ] 然后输入 quit </description>
    </item>
    <item>
      <title>高阶</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/android/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/android/appendix/interview/expert/</guid>
      <description> 高阶面试题 # </description>
    </item>
    <item>
      <title>高阶</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/ios/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/ios/appendix/interview/expert/</guid>
      <description> 高阶面试题 # </description>
    </item>
    <item>
      <title>高阶</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/macos/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/macos/appendix/interview/expert/</guid>
      <description> 高阶面试题 # </description>
    </item>
    <item>
      <title>高阶</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/unix/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/unix/appendix/interview/expert/</guid>
      <description> 高阶面试题 # </description>
    </item>
    <item>
      <title>高阶</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/windows/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/windows/appendix/interview/expert/</guid>
      <description> 高阶面试题 # </description>
    </item>
    <item>
      <title>高阶</title>
      <link>https://kingye.me/note-cs/docs/direction/be/db/mysql/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/db/mysql/appendix/interview/expert/</guid>
      <description> 高阶面试题 # </description>
    </item>
    <item>
      <title>高阶</title>
      <link>https://kingye.me/note-cs/docs/direction/be/db/postgresql/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/db/postgresql/appendix/interview/expert/</guid>
      <description> 高阶面试题 # </description>
    </item>
    <item>
      <title>高阶</title>
      <link>https://kingye.me/note-cs/docs/direction/be/db/redis/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/db/redis/appendix/interview/expert/</guid>
      <description> 高阶面试题 # </description>
    </item>
    <item>
      <title>高阶</title>
      <link>https://kingye.me/note-cs/docs/direction/be/platform/nodejs/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/platform/nodejs/appendix/interview/expert/</guid>
      <description> 高阶面试题 # </description>
    </item>
    <item>
      <title>高阶</title>
      <link>https://kingye.me/note-cs/docs/direction/client/android/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/client/android/appendix/interview/expert/</guid>
      <description> 高阶面试题 # </description>
    </item>
    <item>
      <title>高阶</title>
      <link>https://kingye.me/note-cs/docs/direction/client/ios/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/client/ios/appendix/interview/expert/</guid>
      <description> 高阶面试题 # </description>
    </item>
    <item>
      <title>高阶</title>
      <link>https://kingye.me/note-cs/docs/direction/client/xiaochengxu/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/client/xiaochengxu/appendix/interview/expert/</guid>
      <description> 高阶面试题 # </description>
    </item>
    <item>
      <title>高阶</title>
      <link>https://kingye.me/note-cs/docs/direction/embedded/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/embedded/appendix/interview/expert/</guid>
      <description> 高阶面试题 # </description>
    </item>
    <item>
      <title>高阶</title>
      <link>https://kingye.me/note-cs/docs/direction/fe/frame/angular/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/fe/frame/angular/appendix/interview/expert/</guid>
      <description> 高阶面试题 # </description>
    </item>
    <item>
      <title>高阶</title>
      <link>https://kingye.me/note-cs/docs/direction/fe/frame/react/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/fe/frame/react/appendix/interview/expert/</guid>
      <description> 高阶面试题 # </description>
    </item>
    <item>
      <title>高阶</title>
      <link>https://kingye.me/note-cs/docs/direction/fe/frame/vue/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/fe/frame/vue/appendix/interview/expert/</guid>
      <description> 高阶面试题 # </description>
    </item>
    <item>
      <title>高阶</title>
      <link>https://kingye.me/note-cs/docs/direction/security/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/security/appendix/interview/expert/</guid>
      <description> 高阶面试题 # </description>
    </item>
    <item>
      <title>Citadel</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/basic/arch/components/citadel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/basic/arch/components/citadel/</guid>
      <description> Citadel # </description>
    </item>
    <item>
      <title>C</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/c/</guid>
      <description>C 学习笔记 # 更多内容见：C 学习笔记</description>
    </item>
    <item>
      <title>Galley</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/basic/arch/components/galley/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/basic/arch/components/galley/</guid>
      <description> Galley 基础 # </description>
    </item>
    <item>
      <title>gulp</title>
      <link>https://kingye.me/note-cs/docs/direction/be/platform/nodejs/basic/build/gulp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/platform/nodejs/basic/build/gulp/</guid>
      <description>gulp # 类似与 make 参考：https://learnxinyminutes.com/docs/zh-cn/make-cn/</description>
    </item>
    <item>
      <title>Quick Start</title>
      <link>https://kingye.me/note-cs/docs/direction/be/db/redis/basic/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/db/redis/basic/quick-start/</guid>
      <description>Quick Start # redis-cli -h host -p port -a password 安装 # 开机自启 # sudo vi /usr/lib/systemd/system/redis.service&#xA;[Unit] Description=Redis persistent key-value database After=network.target After=network-online.target Wants=network-online.target [Service] ExecStart=/usr/bin/redis-server /etc/redis.conf --supervised systemd ExecStop=/usr/libexec/redis-shutdown Type=notify User=redis Group=redis RuntimeDirectory=redis RuntimeDirectoryMode=0755 [Install] WantedBy=multi-user.target 保存退出，执行 sudo systemctl daemon-reload 启动服务 sudo systemctl start redis.service 设置开机自启动 sudo systemctl enable redis.service&#xA;设置密码 # 打开文件 /etc/redis.conf， 找到其中的 # requirepass foobared，去掉前面的 #， 并把 foobared 改成你的密码。&#xA;ps: 如果 redis 没有启用密码，我使用 redis-cli -a xxx 可以访问吗？ 答案是：可以</description>
    </item>
    <item>
      <title>Zsh</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/shell/type/zsh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/shell/type/zsh/</guid>
      <description> Zsh # </description>
    </item>
    <item>
      <title>编程学习网站</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/tool/study/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/tool/study/tutorial/</guid>
      <description></description>
    </item>
    <item>
      <title>锁</title>
      <link>https://kingye.me/note-cs/docs/direction/be/db/redis/design/lock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/db/redis/design/lock/</guid>
      <description>锁 # setnx # setnx msetnx hsetnx SET key value [EX seconds|PX milliseconds] [NX|XX] [KEEPTTL] 那么删除锁的正确姿势之一，就是可以使用 lua 脚本，通过 redis 的 eval/evalsha 命令来运行：&#xA;-- lua删除锁： -- KEYS和ARGV分别是以集合方式传入的参数，对应上文的Test和uuid。 -- 如果对应的value等于传入的uuid。 if redis.call(&amp;#39;get&amp;#39;, KEYS[1]) == ARGV[1] then -- 执行删除操作 return redis.call(&amp;#39;del&amp;#39;, KEYS[1]) else -- 不成功，返回0 return 0 end 通过 lua 脚本能保证原子性的原因说的通俗一点：&#xA;就算你在 lua 里写出花，执行也是一个命令 (eval/evalsha) 去执行的，一条命令没执行完，其他客户端是看不到的。&#xA;那么既然这么麻烦，有没有比较好的工具呢？就要说到 redisson 了。&#xA;redLock # 并非是一个工具，而是 redis 官方提出的一种分布式锁的算法。&#xA;redisson # Redisson 是 java 的 redis 客户端之一，提供了一些 api 方便操作 redis。</description>
    </item>
    <item>
      <title>C&#43;&#43;</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/cpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/cpp/</guid>
      <description>C++ 学习笔记 # 更多内容见：C++ 学习笔记</description>
    </item>
    <item>
      <title>2.2.5.1.1 protobuf</title>
      <link>https://kingye.me/note-cs/docs/direction/be/microservices/rpc/protobuf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/microservices/rpc/protobuf/</guid>
      <description> protobuf # </description>
    </item>
    <item>
      <title>3.1.1 Istio 源码结构</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/code/istio/structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/code/istio/structure/</guid>
      <description>Istio 源码结构 # 1.6.5 $ tree -L 2 . ├── BUGS-AND-FEATURE-REQUESTS.md ├── CODEOWNERS ├── CONTRIBUTING.md ├── LICENSE ├── Makefile ├── Makefile.core.mk ├── Makefile.overrides.mk ├── README.md ├── SUPPORT.md ├── bin │ ├── check_no_modify.sh │ ├── check_samples.sh │ ├── codecov.sh │ ├── codecov_diff.sh │ ├── diff_yaml.py │ ├── init.sh │ ├── mixer_codegen.sh │ ├── nomodify.md5 │ ├── protoc.sh │ ├── update_crds.sh │ ├── update_deps.sh │ └── update_no_modify.sh ├── codecov.skip ├── codecov.threshold ├── common │ ├── Makefile.</description>
    </item>
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/android/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/android/appendix/tutorial/</guid>
      <description> 教程 # 基础 # 进阶 # </description>
    </item>
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/ios/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/ios/appendix/tutorial/</guid>
      <description> 教程 # 基础 # 进阶 # </description>
    </item>
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/macos/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/macos/appendix/tutorial/</guid>
      <description> 教程 # 基础 # 进阶 # </description>
    </item>
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/unix/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/unix/appendix/tutorial/</guid>
      <description> 教程 # 基础 # 进阶 # </description>
    </item>
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/windows/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/windows/appendix/tutorial/</guid>
      <description> 教程 # 基础 # 进阶 # </description>
    </item>
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/assembly/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/assembly/appendix/tutorial/</guid>
      <description> 教程 # 基础 # NASM 程序设计 - 雨痕 # 进阶 # </description>
    </item>
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/csharp/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/csharp/appendix/tutorial/</guid>
      <description> 教程 # 基础 # 进阶 # </description>
    </item>
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/erlang/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/erlang/appendix/tutorial/</guid>
      <description> 教程 # 基础 # 进阶 # </description>
    </item>
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/haskell/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/haskell/appendix/tutorial/</guid>
      <description> 教程 # 基础 # Real World Haskell 中文版 # huangz1990/real-world-haskell-cn 进阶 # </description>
    </item>
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/objective-c/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/objective-c/appendix/tutorial/</guid>
      <description> 教程 # 基础 # 进阶 # </description>
    </item>
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/r/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/r/appendix/tutorial/</guid>
      <description> 教程 # 基础 # 进阶 # </description>
    </item>
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/ruby/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/ruby/appendix/tutorial/</guid>
      <description> 教程 # 基础 # 如何快速学习 Ruby on Rails？ 进阶 # </description>
    </item>
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/scala/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/scala/appendix/tutorial/</guid>
      <description> 教程 # 基础 # 进阶 # </description>
    </item>
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/swift/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/swift/appendix/tutorial/</guid>
      <description> 教程 # 基础 # 进阶 # </description>
    </item>
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/zig/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/zig/appendix/tutorial/</guid>
      <description> 教程 # 基础 # 进阶 # </description>
    </item>
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/note-cs/docs/direction/be/db/postgresql/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/db/postgresql/appendix/tutorial/</guid>
      <description> 教程 # 基础 # 进阶 # </description>
    </item>
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/appendix/tutorial/</guid>
      <description> Istio 教程 # 基础 # katacoda: 使用 istioctl 安装 istio 绿色记忆: Istio 学习笔记 绿色记忆: Istio Pilot 与 Envoy 的交互机制解读 进阶 # </description>
    </item>
    <item>
      <title>4.3 关注项目</title>
      <link>https://kingye.me/note-cs/docs/direction/se/arch/scene/circuit-breaker/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/arch/scene/circuit-breaker/attention/</guid>
      <description>关注 # 其他 # resilience4j/resilience4j # ehcache/ehcache3 # ehcache 是 ​​ 一个用 Java 实现的使用简单，高速，实现线程安全的缓存管理类库， ehcache 提供了用内存，磁盘文件存储，以及分布式存储方式等多种灵活的 cache 管理方案。 http://www.ehcache.org&#xA;Netflix/Hystrix # Hystrix 是 Netflix OSS 的一部分，是微服务领域的领先的熔断工具。Hystrix 可以被视为白盒监控工具，而 Istio 可以被视为黑盒监控工具，&#xA;Istio 是无缝衔接服务，istio 可以在不更改应用程序代码的情况下配置和使用。Hystrix 的使用需要更改每个服务来引入 Hystrix libraries。</description>
    </item>
    <item>
      <title>5G 边缘计算</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/edge/5g-edge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/edge/5g-edge/</guid>
      <description>5G 边缘计算 # 5G 的 G 是英文 Generation 的缩写，也就是 “世代” 的意思&#xA;简单说，5G 就是第五代移动通信系统&#xA;5G 与边缘计算有什么关系？ # 5G 通信网络更加去中心化，需要在网络边缘部署小规模或者便携式数据中心，进行终端请求的本地化处理，以满足 URLLC 和 mMTC 的超低延时需求，因此边缘计算是 5G 核心技术之一。&#xA;5G 的三大典型应用场景对网络性能的要求有显著差异，但为控制成本，运营商必然选择一张承载网 + 网络切片 / 边缘计算技术，实现在最少的资本投入下最丰富的网络功能。&#xA;在 5G 时代，承载网的带宽瓶颈、时延抖动等性能瓶颈难以突破，引入边缘计算后将大量业务在网络边缘终结。&#xA;5G 与边缘计算的关系 # 5G 为边缘计算产业的落地和发展提供了良好的网络基础， 主要体现在三大场景（eMBB，uRLLC 和 mMTC）的支持、核心网用户面功能的灵活部署以及 5G 网络能力开放等方面。&#xA;“5G + MEC + AI”是 5G 在网络边缘更好使能各行各业的关键； 是运营商助力垂直行业数字化和智能化的新模式； 是运营商进入垂直行业的触点和重点场景； 也是 5G 应用是否成功的一个重要标志。&#xA;5G 支持将网络能力开放给边缘应用。 无线网络信息服务、位置服务、QoS服务等网络能力，可以封装成边缘计算 PaaS 平台的 API，开放给应用。 5G 与边缘计算结合，是运营商使能边缘计算的新核心竞争力和最大独特优势。 同时，边缘计算也成为 5G 服务垂直行业，充分发挥 5G 新网络特性的重要利器之一。&#xA;5G MEC 将云计算和 5G 核心网带到网络边缘，带来了新的流量模型和部署模型。 如果运营商还继续采用 4G 移动承载网的设计思路，在 5G 时代，运营商网络将面临边缘计算的困局。</description>
    </item>
    <item>
      <title>C&#43;&#43; FAQ</title>
      <link>https://kingye.me/note-cs/docs/study/course/basic/pl/cpp/cpp-faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/course/basic/pl/cpp/cpp-faq/</guid>
      <description> C++ FAQ # 学习进度 # Copying permissions On-line sites that distribute this document C++-FAQ-Book versus (on-line) C++-FAQ Recent changes to this document Netiquette when posting to comp.lang.c++ Big Picture Issues Classes and objects References Inline functions Constructors Destructors Assignment operators Operator overloading Friends Input/output via &amp;lt;iostream&amp;gt; and &amp;lt;cstdio&amp;gt; Freestore management Exceptions and error handling Const correctness Inheritance &amp;mdash; basics Inheritance &amp;mdash; virtual functions Inheritance &amp;mdash; proper inheritance and substitutability Inheritance &amp;mdash; abstract base classes (ABCs) Inheritance &amp;mdash; what your mother never told you Inheritance &amp;mdash; private and protected inheritance Inheritance &amp;mdash; multiple and virtual inheritance Built-in / intrinsic / primitive data types Coding standards Learning OO/C++ Newbie Questions / Answers Learning C++ if you already know Smalltalk Reference and value semantics How to mix C and C++ Pointers to member functions Container classes Templates Serialization and Unserialization Class libraries Compiler dependencies Miscellaneous technical issues Miscellaneous environmental issues </description>
    </item>
    <item>
      <title>CAP</title>
      <link>https://kingye.me/note-cs/docs/direction/se/arch/principle/cap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/arch/principle/cap/</guid>
      <description> CAP # P 是前提 # 在理论计算机科学中，CAP 定理（CAP theorem），又被称作布鲁尔定理（Brewer&amp;rsquo;s theorem），它指出对于一个 distributed data store 来说，不可能同时满足以下三点：&#xA;一致性（Consistency） 每次读取要么获得最近写入的数据，要么获得一个错误。 可用性（Availability） 每次请求都能获得一个非错误响应，但不保证返回的是最新写入的数据。 分区容错性（Partition tolerance） 以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在 C 和 A 之间做出选择。 尽管任意数量的消息被节点间的网络丢失（或延迟），系统仍继续运行。 分区指网络分区，通信的两台服务器之间网络断开，就发生了网络分区 一般选 AP # 也就是说，在存在网络分区的情况下，一致性和可用性必须二选一。&#xA;比如：A 服务器 B 服务器同步数据，现在 A B 之间网络断掉了，那么现在发来 A 一个写入请求，但是 B 却没有相关的请求，显然，&#xA;如果 A 不写，保持一致性，那么我们就失去了 A 的服务， 但是如果 A 写了，跟 B 的数据就不一致了，我们自然就丧失了一致性。 这里的一致性（Consistency）是强一致性，意思是 AB 的数据时刻都是同步的， 如果我们放弃了强一致性，不代表我们的数据就是一定是不一致的了，我们可以让 A 先写入本地，等到通信恢复了再同步给 B，这就是所谓的最终一致性，长远的看我们的数据还是一致的，我们只是在某一个时间窗口里数据不一致罢了。 如果这个时间窗口小过了用户逻辑处理的时间。那么其实对于用户来说根本感觉不到。&#xA;现实中的 CAP # CAP 对实际工作缺乏指导性。&#xA;实际系统主要有三种：&#xA;强调 availability 的 eventual consistency 系统， 比如 Amazon Dynamo 及他们的复制品； 强调一致性的系统， 典型的是基于 Paxos 的系统； 强调性能不顾其他的系统， 典型的是 Async replication 的主从备份系统。 参考 # CAP 理论常被解释为一种 “三选二” 定律，这是否是一种误解？ 分布式事务中的最终一致具体应该如何实现？ 分布式系统中的数据一致性和性能怎么权衡？ </description>
    </item>
    <item>
      <title>config</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/ssh/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/ssh/config/</guid>
      <description>config # my config # Host github HostName github.com User git IdentityFile ~/.ssh/id_rsa ProxyCommand nc -v -x 127.0.0.1:1081 %h %p Host gitlab HostName gitlab.com User git IdentityFile ~/.ssh/id_rsa ProxyCommand nc -v -x 127.0.0.1:1081 %h %p Host bitbucket HostName bitbucket.org User git IdentityFile ~/.ssh/id_rsa ProxyCommand nc -v -x 127.0.0.1:1081 %h %p Host gitee HostName gitee.com User git IdentityFile ~/.ssh/id_rsa ################ others ################ Host * # 复用之前已经建立的连接 ControlMaster auto # 在最后一个连接关闭之后也不真正的关掉连接 ControlPersist yes # 指定了这个连接的 socket 保存的路径 ControlPath ~/.</description>
    </item>
    <item>
      <title>Dash</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/shell/type/dash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/shell/type/dash/</guid>
      <description>Dash # Dash 与 Bash 的区别 # 定义函数 bash: function 在 bash 中为关键字&#xA;dash: dash 中没有 function 这个关键字&#xA;2.select var in list; do command; done&#xA;bash: 支持&#xA;dash: 不支持，替代方法：采用 while+read+case 来实现&#xA;echo {0..10} bash: 支持 {n..m} 展开&#xA;dash: 不支持，替代方法，采用 seq 外部命令&#xA;here string bash: 支持 here string&#xA;dash: 不支持，替代方法：可采用 here documents&#xA;&amp;amp;word 重定向标准输出和标准错误&#xA;bash: 当 word 为非数字时，&amp;gt;&amp;amp;word 变成重定向标准错误和标准输出到文件 word&#xA;dash: &amp;gt;&amp;amp;word, word 不支持非数字，替代方法: &amp;gt;word 2&amp;gt;&amp;amp;1; 常见用法 &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&#xA;数组 bash: 支持数组，bash4 支持关联数组</description>
    </item>
    <item>
      <title>Envoy API</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/envoy/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/envoy/api/</guid>
      <description>Envoy API # API versioning guidelines # UDPA # Universal Data Plane API&#xA;cncf/udpa Universal Data Plane API Working Group (UDPA-WG) Goal: The objective of the Universal Data Plane API Working Group (UDPA-WG) is to bring together parties across the industry interested in a common control and configuration API for data plane proxies and load balancers.</description>
    </item>
    <item>
      <title>Envoy filters</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/envoy/filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/envoy/filter/</guid>
      <description>Envoy filters # Lua filter # envoy-apisix # api7/envoy-apisix A Lua framework that support Apache APISIX plugins run directly in Envoy Lua filter without modify Envoy.</description>
    </item>
    <item>
      <title>GDB 教程</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/debug/gdb/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/debug/gdb/tutorial/</guid>
      <description> GDB 教程 # </description>
    </item>
    <item>
      <title>git config</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/git/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/git/config/</guid>
      <description> git config # config 权限 # 问题： Bad owner or permissions on ~/.ssh/config&#xA;解决：&#xA;chown $USER ~/.ssh/config chmod 644 ~/.ssh/config </description>
    </item>
    <item>
      <title>go wiki</title>
      <link>https://kingye.me/note-cs/docs/study/course/basic/pl/go/go-wiki/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/course/basic/pl/go/go-wiki/</guid>
      <description>go wiki # 学习进度 # Getting started with Go Working with Go Learning more about Go Learning Go - A collection of resources for learning Go - beginner to advanced. Best Practices for a New Go Developer - Insights from Go community members. Server programming - Building web, mobile, and API servers. More on concurrency More on error handling More on testing More on mobile - Android and iOS Books - A list of Go books that have been published (ebook, paper) Blogs - Blogs about Go Podcasts - Podcasts and episodes featuring Go Videos, Talks and Presentations GopherVids is a searchable index of videos about Go.</description>
    </item>
    <item>
      <title>Jaeger</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/tracing/jaeger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/tracing/jaeger/</guid>
      <description>Jaeger # Jaeger \ˈyā-gər\&#xA;jaegertracing/jaeger CNCF Jaeger, a Distributed Tracing Platform https://www.jaegertracing.io/</description>
    </item>
    <item>
      <title>Kong Ingress</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/ingress/kong-ingress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/ingress/kong-ingress/</guid>
      <description>Kong Ingress # Kong/kubernetes-ingress-controller Kong for Kubernetes</description>
    </item>
    <item>
      <title>LDS</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/envoy/xds/lds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/envoy/xds/lds/</guid>
      <description>LDS # 监听器发现服务（LDS）是一个可选的 API，Envoy 将调用它来动态获取监听器。Envoy 将协调 API 响应，并根据需要添加、修改或删除已知的监听器。&#xA;监听器更新的语义如下：&#xA;每个监听器必须有一个独特的名字。如果没有提供名称，Envoy 将创建一个 UUID。要动态更新的监听器，管理服务必须提供监听器的唯一名称。 当一个监听器被添加，在参与连接处理之前，会先进入 “预热” 阶段。例如，如果监听器引用 RDS 配置，那么在监听器迁移到 “active” 之前，将会解析并提取该配置。 监听器一旦创建，实际上就会保持不变。因此，更新监听器时，会创建一个全新的监听器（使用相同的侦听套接字）。新增加的监听者都会通过上面所描述的相同 “预热” 过程。 当更新或删除监听器时，旧的监听器将被置于 “draining（逐出）” 状态，就像整个服务重新启动时一样。监听器移除之后，该监听器所拥有的连接，经过一段时间优雅地关闭（如果可能的话）剩余的连接。逐出时间通过 --drain-time-s 选项设置。 注意&#xA;任何在 Envoy 配置中静态定义的监听器都不能通过 LDS API 进行修改或删除。</description>
    </item>
    <item>
      <title>LLDB 教程</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/debug/lldb/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/debug/lldb/tutorial/</guid>
      <description> LLDB 教程 # </description>
    </item>
    <item>
      <title>Network</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/lorawan/chirpstack/network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/lorawan/chirpstack/network/</guid>
      <description>ChirpStack Network Server # ChirpStack Network Server is an open-source LoRaWAN network-server. https://www.chirpstack.io&#xA;数据库 # Schema Name Type Owner public code_migration table chirpstack_ns public device table chirpstack_ns public device_activation table chirpstack_ns public device_activation_id_seq sequence chirpstack_ns public device_multicast_group table chirpstack_ns public device_profile table chirpstack_ns public device_queue table chirpstack_ns public device_queue_id_seq sequence chirpstack_ns public gateway table chirpstack_ns public gateway_board table chirpstack_ns public gateway_profile table chirpstack_ns public gateway_profile_extra_channel table chirpstack_ns public gateway_profile_extra_channel_id_seq sequence chirpstack_ns public gateway_stats table chirpstack_ns public gateway_stats_id_seq sequence chirpstack_ns public gorp_migrations table chirpstack_ns public multicast_group table chirpstack_ns public multicast_queue table chirpstack_ns public multicast_queue_id_seq sequence chirpstack_ns public routing_profile table chirpstack_ns public service_profile table chirpstack_ns (21 rows)</description>
    </item>
    <item>
      <title>OpenResty</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/openresty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/openresty/</guid>
      <description> OpenResty # openresty/openresty 参考：&#xA;OpenResty 究竟解决了什么痛点？ 教程 # 参考：&#xA;Programming OpenResty - 章亦春 OpenResty 最佳实践 </description>
    </item>
    <item>
      <title>Pilot</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/code/istio/pilot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/code/istio/pilot/</guid>
      <description>Pilot # 若无特别说明，本文是根据 Istio 1.6.5 进行分析。 pilot discovery # 函数调用栈 # NewServer initConfigController makeKubeConfigController (add schema) collections.Pilot.All() NewClient NewController (add stores for CRD kinds) addInformer newCacheHandler informer := cache.NewSharedIndexInformer(&amp;hellip;) informer.AddEventHandler queue.Push(onEvent) s.ConfigStores = append(s.ConfigStores, configController) aggregateConfigController, err := configaggregate.MakeCache(s.ConfigStores) s.configController = aggregateConfigController addStartFunc initServiceControllers NewServiceDiscovery RegisterEventHandler: 注册 serviceEntryKind 与 workloadEntryKind 的 handler initDiscoveryService initEventHandlers 定义 handler s.EnvoyXdsServer.ConfigUpdate(pushReq): 真正做的事情，更新 envoy xds 配置 添加 handler discoveryServer.Start(stop) (crd controller) Run informer.Run(stop) cache.WaitForCacheSync(stop, c.</description>
    </item>
    <item>
      <title>RTMP</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/rtmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/rtmp/</guid>
      <description> RTMP # Real-Time Messaging Protocol&#xA;默认端口：1935&#xA;握手 # 复杂握手 # RTMP vs RTSP # 目前直播方案是：rtmp 推到 server，然后转 rtmp/http-flv/hls.&#xA;直播走的是互联网的路子，浏览器和 Flash 不支持 RTSP。 国内的 CDN 对 RTMP 做过优化，而 RTSP 没有。 网络中的路由器或防火墙可能对 RTSP 端口不开放。 参考：&#xA;为什么现在的视频直播不使用 RTSP 协议而是使用 RTMP？ </description>
    </item>
    <item>
      <title>RTP</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/rtp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/rtp/</guid>
      <description>RTP # 报文结构 # Ver.（2 bits）是目前协议的版本号码，目前版号是 2。 P（1 bit）是用于 RTP 报文（packet）结束点的预留空间，视报文是否需要多余的填塞空间。 X（1 bit）是否在使用延伸空间于报文之中。 CC（4 bits）包含了 CSRC 数目用于修正标头（fixed header）。 M（1 bit）是用于应用等级以及其原型（profile）的定义。如果不为零表示目前的数据有特别的程序解译。 PT（7 bits）是指 payload 的格式并决定将如何去由应用程序加以解译。 SSRC 是同步化来源。 RTP Header # 前 12 个字节出现在每个 RTP 包中，仅仅在被混合器插入时，才出现 CSRC 识别符列表。&#xA;RTP/PS/H.264 # 基于 RTP 的 PS 封装 首先按照 ISO/IEC 13818-1:2000 将视音频封装成 PS 包， 再将 PS 包以负载的方式封装成 RTP 包。&#xA;PS 包 # 进行 PS 封装时，将每个视频帧封装为一个PS 包， 且每个关键帧的 PS 包中包含系统头（System Header）和 PSM（Program Stream Map）。&#xA;系统头和 PSM 放置于 PS 包头之后，第一个 PES 包之前。</description>
    </item>
    <item>
      <title>RTSP</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/rtsp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/rtsp/</guid>
      <description>RTSP # Real Time Streaming Protocol&#xA;默认端口：554&#xA;方法 # 一般的顺序是：&#xA;OPTIONS DESCRIBE SETUP PLAY TEARDOWN OPTIONS # 请求返回服务器将接受的请求类型。&#xA;C-&amp;gt;S: OPTIONS rtsp://example.com/media.mp4 RTSP/1.0 CSeq: 1 Require: implicit-play Proxy-Require: gzipped-messages S-&amp;gt;C: RTSP/1.0 200 OK CSeq: 1 Public: DESCRIBE, SETUP, TEARDOWN, PLAY, PAUSE DESCRIBE # SETUP # TEARDOWN # PLAY # PAUSE # 包详情 # 海康摄像头&#xA;OPTIONS rtsp://172.17.11.155:554/h264/ch1/main/av_stream RTSP/1.0 CSeq: 2 User-Agent: LibVLC/2.2.4 (LIVE555 Streaming Media v2016.02.22) # OPTIONS ：这个是选项，问下服务器我到底有啥本领技能？ RTSP/1.0 200 OK CSeq: 2 Public: OPTIONS, DESCRIBE, PLAY, PAUSE, SETUP, TEARDOWN, SET_PARAMETER, GET_PARAMETER Date: Tue, May 23 2017 16:08:47 GMT # 服务器回复你，你有这么多技能：OPTIONS, DESCRIBE, PLAY, PAUSE, SETUP, TEARDOWN, SET_PARAMETER, GET_PARAMETER DESCRIBE rtsp://172.</description>
    </item>
    <item>
      <title>Salesforce</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/others/saas/crm/salesforce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/others/saas/crm/salesforce/</guid>
      <description> Salesforce # </description>
    </item>
    <item>
      <title>submodule</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/git/submodule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/git/submodule/</guid>
      <description>git submodule # 拉取 submodule # git submodule init git submodule update --remote git submodule add -b # 参考：&#xA;How can I specify a branch/tag when adding a Git submodule? submodule 修改 url # edit the .gitmodules file to update the URL git submodule sync 参考： How to change the remote repository for a git submodule?&#xA;delete submodule # Delete the relevant section from the .gitmodules file. Stage the .</description>
    </item>
    <item>
      <title>WebRTC</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/webrtc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/webrtc/</guid>
      <description>WebRTC # Web Real-Time Communication&#xA;支持网页浏览器进行实时语音对话或视频对话的 API</description>
    </item>
    <item>
      <title>X 分钟速成 Lua</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/lua/appendix/tutorial/learn-lua-in-x-minutes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/lua/appendix/tutorial/learn-lua-in-x-minutes/</guid>
      <description>X 分钟速成 Lua # -- 单行注释以两个连字符开头 --[[ 多行注释 --]] ---------------------------------------------------- -- 1. 变量和流程控制 ---------------------------------------------------- num = 42 -- 所有的数字都是双精度浮点型。 -- 别害怕，64位的双精度浮点型数字中有52位用于 -- 保存精确的整型值; 对于52位以内的整型值， -- 不用担心精度问题。 s = &amp;#39;walternate&amp;#39; -- 和Python一样，字符串不可变。 t = &amp;#34;也可以用双引号&amp;#34; u = [[ 多行的字符串 以两个方括号 开始和结尾。]] t = nil -- 撤销t的定义; Lua 支持垃圾回收。 -- 块使用do/end之类的关键字标识： while num &amp;lt; 50 do num = num + 1 -- 不支持 ++ 或 += 运算符。 end -- If语句： if num &amp;gt; 40 then print(&amp;#39;over 40&amp;#39;) elseif s ~= &amp;#39;walternate&amp;#39; then -- ~= 表示不等于。 -- 像Python一样，用 == 检查是否相等 ；字符串同样适用。 io.</description>
    </item>
    <item>
      <title>xargs</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/shell/command/xargs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/shell/command/xargs/</guid>
      <description> xargs # xargs 命令的作用，是将标准输入转为命令行参数&#xA;-L # xargs -L 1 xargs --max-lines=1 # synonym for the -L option -L 参数指定多少行作为一个命令行参数。&#xA;执行子目录里所有的 deploy.sh find . -name deploy.sh | xargs -L 1 sh&#xA;-n # -L 参数虽然解决了多行的问题，但是有时用户会在同一行输入多项。 -n 参数指定每次将多少项，作为命令行参数。&#xA;参考 # 阮一峰 xargs 命令教程 </description>
    </item>
    <item>
      <title>XSS</title>
      <link>https://kingye.me/note-cs/docs/direction/security/basic/xss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/security/basic/xss/</guid>
      <description>XSS # Cross-site scripting 跨站脚本 (wiki)&#xA;XSS 发生的原因 # 没有将用户输入的文本进行合适的过滤，就贸然插入到 HTML 中，这很容易造成注入漏洞。 攻击者可以利用漏洞，构造出恶意的代码指令，进而利用恶意代码危害数据安全。&#xA;不仅仅是业务上的 “用户的 UGC 内容” 可以进行注入，包括 URL 上的参数等都可以是攻击的来源。在处理输入时，以下内容都不可信：&#xA;来自用户的 UGC 信息 来自第三方的链接 URL 参数 POST 参数 Referer （可能来自不可信的来源） Cookie （可能来自其他子域注入） XSS 有哪些注入的方法 # 在 HTML 中内嵌的文本中，恶意内容以 script 标签形成注入。 在内联的 JavaScript 中，拼接的数据突破了原本的限制（字符串，变量，方法名等）。 在标签属性中，恶意内容包含引号，从而突破属性值的限制，注入其他属性或者标签。 在标签的 href、src 等属性中，包含 javascript: 等可执行代码。 在 onload、onerror、onclick 等事件中，注入不受控制代码。 在 style 属性和标签中，包含类似 background-image:url(&amp;quot;javascript:...&amp;quot;); 的代码（新版本浏览器已经可以防范）。 在 style 属性和标签中，包含类似 expression(...) 的 CSS 表达式代码（新版本浏览器已经可以防范）。 XSS 分类 # 存储型 # 存储型 XSS 的攻击步骤：</description>
    </item>
    <item>
      <title>单一职责原则</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/principle/srp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/principle/srp/</guid>
      <description>单一职责原则 # 就一个类而言，应该仅有一个引起它变化的原因。</description>
    </item>
    <item>
      <title>安装</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/basic/quick/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/basic/quick/install/</guid>
      <description>Istio 安装 # 快速安装（适合新人） # Download and install Istio Deploy the sample application Open the application to outside traffic View the dashboard 使用 Istioctl 进行安装 # 下载 Istio release # [完成平台设置](platform-specific setup) # Check the Requirements for Pods and Services # Install Istio using the default profile # export INGRESS_HOST=$(kubectl get po -l istio=ingressgateway -n istio-system -o jsonpath=&amp;#39;{.items[0].status.hostIP}&amp;#39;) export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=&amp;#39;{.spec.ports[?(@.name==&amp;#34;http2&amp;#34;)].nodePort}&amp;#39;) export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=&amp;#39;{.</description>
    </item>
    <item>
      <title>抽象工厂</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/abstract-factory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/abstract-factory/</guid>
      <description> 抽象工厂模式 # Abstract Factory Pattern&#xA;提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类，具体的工厂负责实现具体的产品实例。&#xA;解析&#xA;对产品进一步分类：抽象产品族 -&amp;gt; 抽象产品 -&amp;gt; 具体产品 每一个具体工厂，通过不同的工厂方法，可以实例化某 一类 产品族的多个具体产品 缺点&#xA;对于新的产品族符合开闭原则，对于新的产品不符合开闭原则，这一特性称为 开闭原则的倾斜性 。 抽象工厂接口中已经确定了可以被创建的产品集合，如果需要添加新产品，此时就必须去修改抽象工厂的接口，违反开闭原则。 代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>教程</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/flowchart/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/flowchart/tutorial/</guid>
      <description> Flowchart 教程 # </description>
    </item>
    <item>
      <title>教程</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/graphviz/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/graphviz/tutorial/</guid>
      <description>Graphviz 教程 # http://www.graphviz.org/documentation/</description>
    </item>
    <item>
      <title>教程</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/latex/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/latex/tutorial/</guid>
      <description> LaTeX 教程 # 基础 # dspinellis/latex-advice # </description>
    </item>
    <item>
      <title>教程</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/mermaid/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/mermaid/tutorial/</guid>
      <description> Mermaid 教程 # 基础 # </description>
    </item>
    <item>
      <title>教程</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/plantuml/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/plantuml/tutorial/</guid>
      <description> PlantUML 教程 # </description>
    </item>
    <item>
      <title>版本</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/ruby/advanced/frame/rainls/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/ruby/advanced/frame/rainls/version/</guid>
      <description> 版本 # 历史版本 # v6.0 # v5.0 # v5.2 # v4.0 # v3.0 # v2.0 # </description>
    </item>
    <item>
      <title>设备发现</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/onvif/discovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/onvif/discovery/</guid>
      <description>设备发现 # 我们传统的 Web Services 服务调用的模式都是这样的：客户端在设计时就预先知道目标服务的地址（IP 地址或者域名），客户端基于这个地址进行服务调用。&#xA;那如果客户端预先不知道目标服务的地址该怎么办？&#xA;WS-Discovery（全称为 Web Services Dynamic Discovery）标准就是用于解决该问题的，遵循该标准，客户端预先不知道目标服务地址的情况下，可以动态地探测到可用的目标服务，以便进行服务调用。这个过程就是「设备发现」的过程。&#xA;WS-Discovery 模式 # WS-Discovery 定义了两种模式：Ad hoc 模式和 Managed 模式。&#xA;Ad hoc 模式 # Ad hoc 模式：客户端以多播 (multicast) 的形式往多播组 (multicast group) 发送一个 Probe（探测）消息搜寻目标服务，在该探测消息中，包含相应的搜寻条件。如果目标服务满足该条件，则直接将响应 ProbeMatch 消息（服务自身相关的信息，包括地址）回复给客户端。 Message Exchanges in an ad hoc mode. Message exchanges in an ad hoc mode in the presence of a Discovery Proxy. Managed 模式 # Managed 模式：即代理模式。Ad hoc 模式有个局限性，只能局限于一个较小的网络。Managed 模式就是为了解决这个问题的，在 Managed 模式下，一个维护所有可用目标服务的中心发现代理（Discovery Proxy）被建立起来，客户端只需要将探测消息发送到该发现代理就可以得到相应的目标服务信息。 Message exchanges in a managed mode.</description>
    </item>
    <item>
      <title>适配器</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/structural/adapter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/structural/adapter/</guid>
      <description> 适配器模式 # Adapter&#xA;适配器 Adapter 继承自 Adaptee，同时又实现了目标(Target)接口。&#xA;public interface Target { // 这是源类Adapteee没有的方法 public void Request(); } public class Adaptee { public void SpecificRequest() { } } // 适配器Adapter继承自Adaptee，同时又实现了目标(Target)接口。 public class Adapter extends Adaptee implements Target { // 目标接口要求调用Request()这个方法名，但源类Adaptee没有方法Request() // 因此适配器补充上这个方法名 // 但实际上Request()只是调用源类Adaptee的SpecificRequest()方法的内容 // 所以适配器只是将SpecificRequest()方法作了一层封装，封装成Target可以调用的Request()而已 @Override public void Request() { this.SpecificRequest(); } } public class AdapterPattern { public static void main(String[] args){ Target mAdapter = new Adapter()； mAdapter.Request(); } } 代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>通过例子学 Golang</title>
      <link>https://kingye.me/note-cs/docs/study/course/basic/pl/go/gobyexample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/course/basic/pl/go/gobyexample/</guid>
      <description> 通过例子学 Golang # mmcgrana/gobyexample 点击阅读：Go by Example&#xA;中文翻译 # gobyexample-cn/gobyexample 点击阅读：通过例子学 Golang&#xA;学习进度 # Hello World 值 变量 常量 For 循环 If/Else 分支 Switch 分支结构 数组 切片 Map Range 遍历 函数 多返回值 变参函数 闭包 递归 指针 结构体 方法 接口 错误处理 协程 通道 通道缓冲 通道同步 通道方向 通道选择器 超时处理 非阻塞通道操作 通道的关闭 通道遍历 Timer Ticker 工作池 WaitGroup 速率限制 原子计数器 互斥锁 状态协程 排序 使用函数自定义排序 Panic Defer 组合函数 字符串函数 字符串格式化 正则表达式 JSON XML 时间 时间戳 时间的格式化和解析 随机数 数字解析 URL 解析 SHA1 哈希 Base64 编码 读文件 写文件 行过滤器 文件路径 目录 临时文件和目录 单元测试 命令行参数 命令行标志 命令行子命令 环境变量 HTTP 客户端 HTTP 服务端 Context 生成进程 执行进程 信号 退出 </description>
    </item>
    <item>
      <title>GAE</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/others/paas/gae/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/others/paas/gae/</guid>
      <description> Google App Engine # </description>
    </item>
    <item>
      <title>homebrew</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/package-manager/brew/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/package-manager/brew/</guid>
      <description>Homebrew # tap # brew tap 可以为 brew 的软件的 跟踪，更新，安装添加更多的的 tap formulae&#xA;如果你在核心仓库没有找到你需要的软件，那么你就需要安装第三方的仓库去安装你需要的软件&#xA;tap 命令的仓库源默认来至于 Github，但是这个命令也不限制于这一个地方&#xA;brew tap # 没有参数会自动更新已经存在的 tap 并列出当前已经 tapped 的仓库&#xA;# URL 默认是 https://github.com/user/homebrew-repo brew tap &amp;lt;user&amp;gt;/&amp;lt;repo&amp;gt; brew tap &amp;lt;user&amp;gt;/&amp;lt;homebrew-repo&amp;gt; # URL 可以是任何位置，任何协议 brew tap &amp;lt;user&amp;gt;/&amp;lt;repo&amp;gt; URL homebrew/core 默认是最高优先级&#xA;可以使用 brew tap-pin username/repo 使这个仓库优先级高于 core&#xA;使用 brew-tap-unpin username/repo 取消&#xA;当你使用 brew install foo 这个命令时，brew 将按照下面的顺序去查找哪个 formula(tap) 将被使用:&#xA;pinned taps core formulae other taps 镜像加速 # 清华大学镜像 # 替换现有上游</description>
    </item>
    <item>
      <title>4.2 面试题</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/zig/appendix/interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/zig/appendix/interview/</guid>
      <description> 面试题 # 基础题 # 进阶题 # </description>
    </item>
    <item>
      <title>4.2 面试题</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/appendix/interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/appendix/interview/</guid>
      <description> Istio 面试题 # 基础题 # 进阶题 # </description>
    </item>
    <item>
      <title>4G</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/communication/4g/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/communication/4g/</guid>
      <description> 4G # </description>
    </item>
    <item>
      <title>5G</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/communication/5g/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/communication/5g/</guid>
      <description>5G # 5G 速度 # 世界上最快的 4G 网速（挪威，63.13Mbps）&#xA;最快的宽带网速（新加坡，189Mbps）&#xA;2019 年 1 月 24 日，华为发布业界标杆 5G 多模终端芯片巴龙 5000&#xA;在 5G 峰值下载速率是 4G LTE 可体验速率的 10 倍&#xA;5G 应用场景 # 国际电信联盟无线电通信局（ITU-R）定义了 5G 的三大典型应用场景为：&#xA;增强型移动宽带（eMBB） 超可靠低时延通信（uRLLC） 海量大规模连接物联网（mMTC） 增强型移动宽带（eMBB） # eMBB 主要面向虚拟现实（VR）/ 增强现实（AR）、在线 4K 视频等高带宽需求业务&#xA;超可靠低时延通信（uRLLC） # mMTC 主要面向智慧城市、智能交通等高连接密度需求的业务&#xA;海量大规模连接物联网（mMTC） # uRLLC 主要面向车联网、无人驾驶、无人机等时延敏感的业务。&#xA;5G 架构 # 5G 核心网采用控制面（SMF：Session Management Function）和用户面 UPF 分离的 CUPS（Control and User Plane Separation ）架构&#xA;5G 控制面集中部署，一个控制面（SMF）可以同时管理很多个 UPF 而不影响 5G 核心网的性能； 5G 用户面分散部署，UPF 可以按需灵活分布部署，部署到网络边缘支持边缘计算。</description>
    </item>
    <item>
      <title>ACID</title>
      <link>https://kingye.me/note-cs/docs/direction/se/arch/principle/acid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/arch/principle/acid/</guid>
      <description>ACID # In computer science, ACID (atomicity, consistency, isolation, durability) is a set of properties of database transactions intended to guarantee validity even in the event of errors, power failures, etc. In the context of databases, a sequence of database operations that satisfies the ACID properties (and these can be perceived as a single logical operation on the data) is called a transaction.&#xA;ACID 是追求 CAP (Consistency, Availability, Partition tolerance) 的一致性 (C)</description>
    </item>
    <item>
      <title>Ambassador</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/ingress/ambassador/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/ingress/ambassador/</guid>
      <description>Ambassador # datawire/ambassador Open source Kubernetes-native API gateway for microservices built on the Envoy Proxy</description>
    </item>
    <item>
      <title>Application</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/lorawan/chirpstack/application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/lorawan/chirpstack/application/</guid>
      <description>ChirpStack Application Server # ChirpStack Application Server is an open-source LoRaWAN application-server. https://www.chirpstack.io&#xA;数据库 # Schema Name Type Owner public application table chirpstack_as public application_id_seq sequence chirpstack_as public code_migration table chirpstack_as public device table chirpstack_as public device_activation table chirpstack_as public device_activation_id_seq sequence chirpstack_as public device_keys table chirpstack_as public device_multicast_group table chirpstack_as public device_profile table chirpstack_as public fuota_deployment table chirpstack_as public fuota_deployment_device table chirpstack_as public gateway table chirpstack_as public gateway_ping table chirpstack_as public gateway_ping_id_seq sequence chirpstack_as public gateway_ping_rx table chirpstack_as public gateway_ping_rx_id_seq sequence chirpstack_as public gateway_profile table chirpstack_as public gorp_migrations table chirpstack_as public integration table chirpstack_as public integration_id_seq sequence chirpstack_as public multicast_group table chirpstack_as public network_server table chirpstack_as public network_server_id_seq sequence chirpstack_as public organization table chirpstack_as public organization_id_seq sequence chirpstack_as public organization_user table chirpstack_as public organization_user_id_seq sequence chirpstack_as public remote_fragmentation_session table chirpstack_as public remote_multicast_class_c_session table chirpstack_as public remote_multicast_setup table chirpstack_as public service_profile table chirpstack_as public user table chirpstack_as public user_id_seq sequence chirpstack_as (33 rows)</description>
    </item>
    <item>
      <title>BASE</title>
      <link>https://kingye.me/note-cs/docs/direction/se/arch/principle/base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/arch/principle/base/</guid>
      <description> BASE # Basically Available, Soft state, Eventual consistency&#xA;BASE 理论是 CAP 理论中的 AP 的延伸，是对互联网大规模分布式系统的实践总结，强调可用性。&#xA;基本可用 # 流量削峰 在不同的时间，出售不同区域的票，将访问请求错开，削弱请求峰值 延迟响应 在春运期间，自己提交的购票请求，往往会在队列中排队等待处理，可能几分钟或十几分钟后，系统才开始处理，然后响应处理结果 体验降级 比如用小图片来替代原始图片，通过降低图片的清晰度和大小，提升系统的处理能力。 过载保护 把接收到的请求放在指定的队列中排队处理，如果请求等待时间超时了（假设是 100ms），这个时候直接拒绝超时请求；再比如队列满了之后，就清除队列中一定数量的排队请求，保护系统不过载，实现系统的基本可用。 最终的一致 # 读时修复：在读取数据时，检测数据的不一致，进行修复。 比如 Cassandra 的 Read Repair 实现，具体来说，在向 Cassandra 系统查询数据的时候，如果检测到不同节点的副本数据不一致，系统就自动修复数据。 写时修复：在写入数据，检测数据的不一致时，进行修复。 比如 Cassandra 的 Hinted Handoff 实现。具体来说，Cassandra 集群的节点之间远程写数据的时候，如果写失败就将数据缓存下来，然后定时重传，修复数据的不一致性。 写时修复不需要做数据一致性对比，性能消耗比较低，对系统运行影响也不大，推荐在实现最终一致性时优先实现这种方式。 异步修复：这个是最常用的方式，通过定时对账检测副本数据的一致性，并修复。 </description>
    </item>
    <item>
      <title>CDS</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/envoy/xds/cds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/envoy/xds/cds/</guid>
      <description> CDS # </description>
    </item>
    <item>
      <title>CPU</title>
      <link>https://kingye.me/note-cs/docs/basic/os/cpu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/cpu/</guid>
      <description>CPU # L1 Cache # Intel Core i7 的组织结构：</description>
    </item>
    <item>
      <title>CSRF</title>
      <link>https://kingye.me/note-cs/docs/direction/security/basic/csrf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/security/basic/csrf/</guid>
      <description> CSRF # 参考 # 前端安全系列（二）：如何防止 CSRF 攻击？ </description>
    </item>
    <item>
      <title>Elasticsearch</title>
      <link>https://kingye.me/note-cs/docs/direction/be/search/elasticsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/search/elasticsearch/</guid>
      <description>Elasticsearch # Open Source, Distributed, RESTful Search Engine https://www.elastic.co/products/elasticsearch</description>
    </item>
    <item>
      <title>gem</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/ruby/basic/others/gem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/ruby/basic/others/gem/</guid>
      <description> RubyGems # 安装 # ruby setup.rb&#xA;参考：https://rubygems.org/pages/download&#xA;RubyGems installed the following executables: /opt/homebrew/Cellar/ruby/3.2.2/bin/gem /opt/homebrew/Cellar/ruby/3.2.2/bin/bundle /opt/homebrew/Cellar/ruby/3.2.2/bin/bundler Ruby Interactive (ri) documentation was installed. ri is kind of like man pages for Ruby libraries. You may access it like this: ri Classname ri Classname.class_method ri Classname#instance_method </description>
    </item>
    <item>
      <title>Go</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/go/</guid>
      <description>Go 学习笔记 # 更多内容见：Go 学习笔记</description>
    </item>
    <item>
      <title>H264</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/h264/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/h264/</guid>
      <description>H264 # H.264，又称为 MPEG-4 第 10 部分，高级视频编码（英语： MPEG-4 Part 10, Advanced Video Coding ，缩写为 MPEG-4 AVC）是一种面向块，基于运动补偿的视频编码标准（英语：Advanced Video Coding） 。&#xA;AVC 和 XviD 都属于 MPEG-4 编码，但由于 AVC 属于 MPEG-4 Part 10，在技术特性上比属于 MPEG-4 Part2 的 XviD 要先进。&#xA;它和 ITU-T H.264 标准是一致的，故又称为 H.264。&#xA;裸流 # H.264 原始码流（又称为 “裸流”）是由一个一个的 NALU 组成的。&#xA;H264 码流可以分为两层&#xA;VCL 层 NAL 层（Network abstraction layer, 叫网络抽象层），保存了 H264 相关的参数信息和图像信息 NAL 层由多个单元 NALU 组成 NALU # NALU (NAL Units) 组成&#xA;NALU 头（00 00 00 01 或者 00 00 01） sps (序列参数集) pps (图像参数集合) slice sei IDR 帧 I 帧（在图像运动变化较少时，I 帧后面是 7 个 P 帧，如果图像运动变化大时，一个序列就短了，I 帧后面可能是 3 个或者 4 个 P 帧） P 帧 B 帧等数据。 一个完整的 NALU 单元结构图</description>
    </item>
    <item>
      <title>Heroku</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/others/paas/heroku/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/others/paas/heroku/</guid>
      <description> Heroku # </description>
    </item>
    <item>
      <title>HLS</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/hls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/hls/</guid>
      <description>HLS # HTTP Live Streaming</description>
    </item>
    <item>
      <title>HTTP FLV</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/http-flv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/http-flv/</guid>
      <description>HTTP FLV # Bilibili/flv.js # HTML5 FLV Player</description>
    </item>
    <item>
      <title>Lucene</title>
      <link>https://kingye.me/note-cs/docs/direction/be/search/lucene/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/search/lucene/</guid>
      <description>Lucene # https://lucene.apache.org/&#xA;apache/lucene-solr # Apache Lucene is a high-performance, full featured text search engine library written in Java.&#xA;Apache Solr is an enterprise search platform written using Apache Lucene. Major features include full-text search, index replication and sharding, and result faceting and highlighting.&#xA;教程 # zzboy/lucene # lucene 技术细节</description>
    </item>
    <item>
      <title>macOS 版本</title>
      <link>https://kingye.me/note-cs/docs/basic/os/type/macos/basic/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/type/macos/basic/version/</guid>
      <description>macOS 版本 # 参考：macOS wikipedia&#xA;macOS 13: Ventura # 2022 年&#xA;macOS 12: Monterey # 2021 年 10 月 25 日&#xA;macOS 11: Big Sur # 2020 年 11 月 12 日&#xA;macOS 10.15: Catalina # 2019 年 10 月 7 日&#xA;macOS 10.14: Mojave # 2018 年 9 月 25 日&#xA;macOS 10.13: High Sierra # 2017 年 9 月 25 日&#xA;macOS 10.12: Sierra # 2016 年 9 月 20 日</description>
    </item>
    <item>
      <title>MPEG</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/mpeg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/mpeg/</guid>
      <description> MPEG # MPEG-1：第一个官方的视讯音频压缩标准，随后在 Video CD 中被采用，其中的音频压缩的第三级（MPEG-1 Layer 3）简称 MP3，成为比较流行的音频压缩格式。 MPEG-2：广播质量的视讯、音频和传输协议。被用于无线 数字电视 - ATSC、DVB 以及 ISDB、数字卫星电视（例如 DirecTV）、数字 有线电视信号，以及 DVD 视频光盘技术中。 MPEG-3：原本目标是为 高清晰度电视（ HDTV）设计，随后发现 MPEG-2 已足够 HDTV 应用，故 MPEG-3 的研发便中止。 MPEG-4：2003 年发布的视讯压缩标准，主要是扩展 MPEG-1、MPEG-2 等标准以支持视频／音频对象（video/audio &amp;ldquo;objects&amp;rdquo;）的编码、3D 内容、低比特率编码（low bitrate encoding）和 数字版权管理（Digital Rights Management），其中第 10 部分由 ISO/IEC 和 ITU-T 联合发布，称为 H.264/MPEG-4 Part 10。 MPEG-7：MPEG-7 并不是一个视讯压缩标准，它是一个多媒体内容的描述标准。 MPEG-21：MPEG-21 是一个正在制定中的标准，它的目标是为未来多媒体的应用提供一个完整的平台。 </description>
    </item>
    <item>
      <title>PS</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/ps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/ps/</guid>
      <description>PS # Program stream&#xA;PS 流的包结构是可变长度的， 一旦某一 PS 包的同步信息丢失，接收机无法确定下一包的同步位置，就会造成失步，导致严重的信息丢失。&#xA;在信道环境较好，传输误码较低时，一般采用 PS 码流。&#xA;TS # MPEG transport stream (MPEG-TS, MTS)&#xA;传输流，是由固定长度为 188 字节的包组成， 含有一个或多个 program, 一个 program 可以包含多个视频、音频、和文字信息的 ES 流； 每个 ES 流会有不同的 PID 标示。&#xA;而又为了可以分析这些 ES 流，TS 有一些固定的 PID 用来间隔发送 program 和 ES 流信息的表格:&#xA;PAT PMT 表 TS 流的包结构是固定长度的， 当传输误码破坏了某一 TS 包的同步信息时，接收机可在固定的位置检测它后面包中的同步信息，从而恢复同步，避免了信息丢失。&#xA;在信道环境较为恶劣，传输误码较高时，一般采用 TS 码流。&#xA;TS 流解码过程 # 获取 TS 中的 PAT 获取 TS 中的 PMT 根据 PMT 可以知道当前网络中传输的视频（音频）类型（H264），相应的 PID，PCR 的 PID 等信息。 设置 demux 模块的视频 Filter 为相应视频的 PID 和 stream type 等。 从视频 Demux Filter 后得到的 TS 数据包中的 payload 数据就是 one piece of PES， 在 TS header 中有一些关于此 payload 属于哪个 PES 的 第多少个数据包。 因此软件中应该将此 payload 中的数据 copy 到 PES 的 buffer 中，用于拼接一个 PES 包。 拼接好的 PES 包的包头会有 PTS，DTS 信息，去掉 PES 的 header 就是 ES。 直接将被拔掉 PES 包头的 ES 包送给 decoder 就可以进行解码。 解码出来的数据就是一帧一帧的视频数据，这些数据至少应当与 PES 中的 PTS 关联一下，以便进行视音频同步。 ES # Elementary Stream</description>
    </item>
    <item>
      <title>Spring Boot</title>
      <link>https://kingye.me/note-cs/docs/direction/be/frame/java/spring/spring-boot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/frame/java/spring/spring-boot/</guid>
      <description>Spring Boot # 教程 # ityouknow/spring-boot-examples # Spring Boot 教程、技术栈示例代码，快速简单上手教程。</description>
    </item>
    <item>
      <title>Spring Cloud</title>
      <link>https://kingye.me/note-cs/docs/direction/be/frame/java/spring/spring-cloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/frame/java/spring/spring-cloud/</guid>
      <description>Spring Cloud # 教程 # ityouknow/spring-cloud-examples # Spring Cloud 学习案例，服务发现、服务治理、链路追踪、服务监控等</description>
    </item>
    <item>
      <title>Spring MVC</title>
      <link>https://kingye.me/note-cs/docs/direction/be/frame/java/spring/spring-mvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/frame/java/spring/spring-mvc/</guid>
      <description> Spring MVC # </description>
    </item>
    <item>
      <title>Traefik</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/ingress/traefik/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/ingress/traefik/</guid>
      <description>Traefik # traefik/traefik The Cloud Native Application Proxy https://traefik.io/</description>
    </item>
    <item>
      <title>UML</title>
      <link>https://kingye.me/note-cs/docs/direction/se/uml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/uml/</guid>
      <description>UML # 泛化关系 (generalization) # is-a 最终代码中，泛化关系表现为继承非抽象类 带空心三角形箭头的直线&#xA;实现关系 (realize) # 最终代码中，实现关系表现为继承抽象类 带空心三角形箭头的虚线&#xA;聚合关系 (aggregation) # 表示整体由部分构成的语义 例如一个部门由多个员工组成 整体和部分不是强依赖的，即使整体不存在了，部分仍然存在 例如， 部门撤销了，人员不会消失，他们依然存在 带空心菱形箭头的直线&#xA;组合关系 (composition) # 表示整体由部分构成的语义 比如公司由多个部门组成 是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了 例如， 公司不存在了，部门也将不存在了 带实心菱形箭头直线&#xA;关联关系 (association) # 它一般用来定义对象之间静态的、天然的结构；通常与运行状态无关 所以，关联关系是一种 &amp;ldquo;强关联&amp;rdquo; 的关系 比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系 在最终代码中，关联对象通常是以成员变量的形式实现的 带箭头的直线&#xA;依赖关系 (dependency) # 描述一个对象在运行期间会用到另一个对象的关系 是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化，依赖关系也可能发生变化 在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系 依赖关系除了临时知道对方外，还是 &amp;ldquo;使用&amp;rdquo; 对方的方法和属性； 带箭头的虚线</description>
    </item>
    <item>
      <title>内存</title>
      <link>https://kingye.me/note-cs/docs/basic/os/memory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/memory/</guid>
      <description> 内存 # </description>
    </item>
    <item>
      <title>告警规则</title>
      <link>https://kingye.me/note-cs/docs/direction/be/devops/prometheus/alerting-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/devops/prometheus/alerting-rule/</guid>
      <description> 告警规则 # groups: - name: example rules: - alert: HighRequestLatency expr: job:request_latency_seconds:mean5m{job=&amp;#34;myjob&amp;#34;} &amp;gt; 0.5 for: 10m labels: severity: page annotations: summary: High request latency groups: - name: example rules: - record: job:http_inprogress_requests:sum expr: sum(http_inprogress_requests) by (job) </description>
    </item>
    <item>
      <title>命令</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/command/</guid>
      <description> 命令模式 # Command Pattern&#xA;代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>常见错误</title>
      <link>https://kingye.me/note-cs/docs/direction/be/db/postgresql/basic/practice/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/db/postgresql/basic/practice/error/</guid>
      <description> PostgreSQL 常见错误 # 权限 # permission denied for relation # 解决 1:&#xA;以 superUser 进入数据库 psql -U postgres -d postgres 切换到 mydb 数据库 \c mydb 赋予所有表的所有权限给 xiaoming GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO xiaoming; 赋予 wechart 用户，tuser 表的所有权限 GRANT ALL PRIVILEGES ON tuser TO wechart; 解决 2：&#xA;ERROR: permission denied for relation hycom 权限被拒绝&#xA;检查数据库连接 检查数据库拥有者和配置的是否一样 访问不同的数据库分区 @TableName (&amp;ldquo;分区名。表名&amp;rdquo;) @TableField (exist = false) 取消数据库映射 </description>
    </item>
    <item>
      <title>开闭原则</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/principle/ocp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/principle/ocp/</guid>
      <description>开闭原则 # 程序中的对象应该对扩展是开放的，对修改是封闭的。&#xA;当一个类实现了一个功能的时候，如果想要改变这个功能不是去修改代码，而是通过扩展的方式去实现。 实现该类提供的接口方法，然后注入到该类中，通过这种方法去实现功能的改变。</description>
    </item>
    <item>
      <title>机器学习</title>
      <link>https://kingye.me/note-cs/docs/domain/ai/ml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/ai/ml/</guid>
      <description>机器学习 # 更多内容见：Machine Learning 学习笔记</description>
    </item>
    <item>
      <title>构造器</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/builder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/builder/</guid>
      <description> 构造器模式 # Builder&#xA;抽象 Builder 规定要有哪些方法（用来创建产品） 具体 Builder 的方法可以实现不一样的内容，这些方法按顺序完成后，可以创建出来特定的产品 Director 规定创建产品的步骤；接收具体的 Builder 对象作为参数，按步骤调用 Builder 对象的各个方法，最后获取到创建的产品 解析&#xA;创建产品的步骤是一致的，所有步骤完成后，就创建出产品 不同 Builder 的同一步可以做不同的事情，最后创建出不同的产品 缺点&#xA;建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式 如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大 代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>桥接</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/structural/bridge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/structural/bridge/</guid>
      <description> 桥接模式 # Bridge&#xA;代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>版本</title>
      <link>https://kingye.me/note-cs/docs/direction/be/db/postgresql/basic/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/db/postgresql/basic/version/</guid>
      <description> PostgreSQL 版本 # 12 # 12.2 # </description>
    </item>
    <item>
      <title>线程</title>
      <link>https://kingye.me/note-cs/docs/basic/os/thread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/thread/</guid>
      <description>线程 # 栈通常是连续增长的，由于每个进程中的各个线程共享虚拟内存空间，当有多个线程时，就需要为每个线程分配不同起始地址的栈。 这就需要在分配栈之前先预估每个线程栈的大小。&#xA;如果线程数量非常多，就很容易栈溢出。&#xA;Split Stacks # 为了解决这个问题，就有了 Split Stacks 技术： 创建栈时，只分配一块比较小的内存，如果进行某次函数调用导致栈空间不足时，就会在其他地方分配一块新的栈空间。 新的空间不需要和老的栈空间连续。函数调用的参数会拷贝到新的栈空间中，接下来的函数执行都在新栈空间中进行。&#xA;Golang 连续栈 # Golang 的栈管理方式与此类似，但是为了更高的效率，使用了 Golang 连续栈。 实现方式也是先分配一块固定大小的栈，在栈空间不足时，分配一块更大的栈，并把旧的栈全部拷贝到新栈中。 这样避免了 Split Stacks 方法可能导致的频繁内存分配和释放。</description>
    </item>
    <item>
      <title>记录规则</title>
      <link>https://kingye.me/note-cs/docs/direction/be/devops/prometheus/recording-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/devops/prometheus/recording-rule/</guid>
      <description> 记录规则 # </description>
    </item>
    <item>
      <title>进程</title>
      <link>https://kingye.me/note-cs/docs/basic/os/process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/os/process/</guid>
      <description> 进程 # 进程虚拟地址空间 # </description>
    </item>
    <item>
      <title>零基础实践深度学习</title>
      <link>https://kingye.me/note-cs/docs/study/course/ai/baidu-aistudio/deep-learning-from-beginning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/course/ai/baidu-aistudio/deep-learning-from-beginning/</guid>
      <description> 百度架构师手把手带你零基础实践深度学习 # https://aistudio.baidu.com/aistudio/course/introduce/1297&#xA;课程列表 # 预习课程 深度学习常用数学知识 第一章：零基础入门深度学习 第二章：一个案例吃透深度学习 第三章：深度学习实践应用 —— 计算机视觉 第四章：目标检测 YoloV3 第五章：深度学习实践应用 —— 自然语言处理 第六章：情感分类 第七章：深度学习实践应用 —— 推荐系统 第八章：深度学习高阶导入 拓展：【AI 实战案例项目集】 </description>
    </item>
    <item>
      <title>2.2.4.3 Zookeeper</title>
      <link>https://kingye.me/note-cs/docs/direction/be/distributed/zookeeper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/distributed/zookeeper/</guid>
      <description> Zookeeper # </description>
    </item>
    <item>
      <title>4.3 关注项目</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/assembly/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/assembly/appendix/attention/</guid>
      <description> 关注项目 # </description>
    </item>
    <item>
      <title>4.3 关注项目</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/csharp/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/csharp/appendix/attention/</guid>
      <description> 关注项目 # </description>
    </item>
    <item>
      <title>4.3 关注项目</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/erlang/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/erlang/appendix/attention/</guid>
      <description> 关注项目 # </description>
    </item>
    <item>
      <title>4.3 关注项目</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/haskell/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/haskell/appendix/attention/</guid>
      <description> 关注项目 # </description>
    </item>
    <item>
      <title>4.3 关注项目</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/lua/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/lua/appendix/attention/</guid>
      <description>关注项目 # ngx_http_lua_module # openresty/lua-nginx-module ngx_http_lua_module - Embed the power of Lua into Nginx HTTP Servers.&#xA;This module is a core component of OpenResty. If you are using this module, then you are essentially using OpenResty.&#xA;Turbo.lua # kernelsauce/turbo Turbo is a framework built for LuaJIT 2 to simplify the task of building fast and scalable network applications. It uses a event-driven, non-blocking, no thread design to deliver excellent performance and minimal footprint to high-load applications while also providing excellent support for embedded uses.</description>
    </item>
    <item>
      <title>4.3 关注项目</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/objective-c/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/objective-c/appendix/attention/</guid>
      <description> 关注项目 # </description>
    </item>
    <item>
      <title>4.3 关注项目</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/r/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/r/appendix/attention/</guid>
      <description> 关注项目 # </description>
    </item>
    <item>
      <title>4.3 关注项目</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/ruby/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/ruby/appendix/attention/</guid>
      <description> 关注项目 # </description>
    </item>
    <item>
      <title>4.3 关注项目</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/scala/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/scala/appendix/attention/</guid>
      <description> 关注项目 # </description>
    </item>
    <item>
      <title>4.3 关注项目</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/swift/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/swift/appendix/attention/</guid>
      <description> 关注项目 # </description>
    </item>
    <item>
      <title>4.3 关注项目</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/zig/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/zig/appendix/attention/</guid>
      <description> 关注项目 # 代表项目 # oven-sh/bun # 推荐练手项目 # </description>
    </item>
    <item>
      <title>4.3 关注项目</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/cn/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/cn/attention/</guid>
      <description>关注项目 # cncf/landscape # The Cloud Native Interactive Landscape filters and sorts hundreds of projects and products, and shows details including GitHub stars, funding or market cap, first and last commits, contributor counts, headquarters location, and recent tweets. https://l.cncf.io&#xA;Trail Map # CNCF Cloud Native Landscape # CNCF Serverless Landscape # dragonflyoss/Dragonfly # Dragonfly is an intelligent P2P based image and file distribution system.&#xA;https://d7y.io</description>
    </item>
    <item>
      <title>4.3 关注项目</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/appendix/attention/</guid>
      <description>关注项目 # istio/istio # Connect, secure, control, and observe services. https://istio.io&#xA;envoyproxy/envoy # Cloud-native high-performance edge/middle/service proxy https://www.envoyproxy.io&#xA;kiali/kiali # Kiali project, observability for the Istio service mesh&#xA;mosn/mosn # MOSN is a cloud native proxy for edge or service mesh. https://mosn.io&#xA;rancher/rio Application Deployment Engine for Kubernetes https://rio.io&#xA;其他 # kubernetes/kubernetes # Production-Grade Container Scheduling and Management https://kubernetes.io&#xA;openzipkin/zipkin # Zipkin is a distributed tracing system https://zipkin.io/&#xA;jaegertracing/jaeger # CNCF Jaeger, a Distributed Tracing Platform https://www.</description>
    </item>
    <item>
      <title>A/B 测试</title>
      <link>https://kingye.me/note-cs/docs/direction/se/arch/scene/release/ab-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/arch/scene/release/ab-testing/</guid>
      <description> A/B 测试 # A/B testing&#xA;参考 # </description>
    </item>
    <item>
      <title>Contour</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/ingress/contour/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/ingress/contour/</guid>
      <description>Contour # projectcontour/contour Contour is a Kubernetes ingress controller using Envoy proxy.</description>
    </item>
    <item>
      <title>EDS</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/envoy/xds/eds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/envoy/xds/eds/</guid>
      <description> EDS # </description>
    </item>
    <item>
      <title>Istio 熔断</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/code/istio/circuit-break/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/code/istio/circuit-break/</guid>
      <description> Istio 熔断 # </description>
    </item>
    <item>
      <title>Istio 限流</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/code/istio/rate-limit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/code/istio/rate-limit/</guid>
      <description> Istio 限流 # </description>
    </item>
    <item>
      <title>Java</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/java/</guid>
      <description>Java # 更多内容见：Java 学习笔记</description>
    </item>
    <item>
      <title>OpenShift</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/others/paas/openshift/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/others/paas/openshift/</guid>
      <description> OpenShift # Red Hat OpenShift is a leading hybrid cloud, enterprise Kubernetes application platform.&#xA;OpenShift 在 Kubernetes 的基础上整合了应用的生命周期管理，包括 image 的编译，持续集成，部署以及更新。&#xA;Openshift 以前是 IaaS，现在 Openshift 自己宣称自己搭配 LXC 已经是 PaaS 了，VPS 不是云服务但可以类比为 IaaS。&#xA;Openshift 没有 root 权限&#xA;参考：&#xA;openshift 和普通 vps 的区别在哪儿？ </description>
    </item>
    <item>
      <title>SkyWalking</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/tracing/skywalking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/tracing/skywalking/</guid>
      <description>SkyWalking # apache/skywalking APM, Application Performance Monitoring System https://skywalking.apache.org/</description>
    </item>
    <item>
      <title>Terraform</title>
      <link>https://kingye.me/note-cs/docs/direction/be/devops/terraform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/devops/terraform/</guid>
      <description>Terraform # hashicorp/terraform Terraform enables you to safely and predictably create, change, and improve infrastructure. It is an open source tool that codifies APIs into declarative configuration files that can be shared amongst team members, treated as code, edited, reviewed, and versioned. https://www.terraform.io/</description>
    </item>
    <item>
      <title>工厂方法</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/factory-method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/factory-method/</guid>
      <description> 工厂方法模式 # Factory Method&#xA;又称工厂模式、多态工厂模式和虚拟构造器模式，&#xA;通过定义工厂父类负责定义创建对象的公共接口，而子类则负责生成具体的对象。&#xA;每个产品的实例化，分别有一个具体工厂负责 符合开闭原则：对扩展开放，对修改关闭 添加一种产品，就添加一种实现该产品的工厂 缺点&#xA;每个工厂只能创建一类产品 代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript 参考 # 简单工厂模式、工厂方法模式和抽象工厂模式有何区别？ </description>
    </item>
    <item>
      <title>组合</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/structural/composite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/structural/composite/</guid>
      <description> 组合模式 # Composite Pattern&#xA;代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>翻译器</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/interpreter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/interpreter/</guid>
      <description> 翻译器模式 # Interpreter Pattern&#xA;代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>里氏替换原则</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/principle/lsp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/principle/lsp/</guid>
      <description> 里氏替换原则 # 所有引用基类的地方必须能透明的使用其子类对象。 只要父类能出现的地方子类就可以出现，替换为子类也不会产生任何的错误。 开闭原则一般可以通过里氏替换实现对扩展开放，对修改关闭的效果。 </description>
    </item>
    <item>
      <title>金丝雀发布</title>
      <link>https://kingye.me/note-cs/docs/direction/se/arch/scene/release/canary-rollouts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/arch/scene/release/canary-rollouts/</guid>
      <description> 金丝雀发布 # canary rollouts&#xA;参考 # </description>
    </item>
    <item>
      <title>JavaScript</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/javascript/</guid>
      <description>JavaScript # 更多内容见：JavaScript 学习笔记</description>
    </item>
    <item>
      <title>Kotlin</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/kotlin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/kotlin/</guid>
      <description>Kotlin 学习笔记 # 更多内容见：Kotlin 学习笔记</description>
    </item>
    <item>
      <title>2.2.4.4 Etcd</title>
      <link>https://kingye.me/note-cs/docs/direction/be/distributed/etcd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/distributed/etcd/</guid>
      <description> Etcd # 读音： 名称来源：UNIX 的 /etc 文件夹和分布式系统 (Distribute system) 的 D </description>
    </item>
    <item>
      <title>Ansible</title>
      <link>https://kingye.me/note-cs/docs/direction/be/devops/ansible/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/devops/ansible/</guid>
      <description>Ansible # ansible/ansible Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy and maintain. Automate everything from code deployment to network configuration to cloud management, in a language that approaches plain English, using SSH, with no agents to install on remote systems.</description>
    </item>
    <item>
      <title>Cloud Foundry</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/others/paas/cloud-foundry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/others/paas/cloud-foundry/</guid>
      <description> Cloud Foundry # Cloud Foundry 提供了云、开发者框架和应用服务的选择，可以更快、更容易的构建、测试、发布和大规模部署应用程序。它是一个开源项目，可通过各种私有云发行版和公有云实例获得。&#xA;组件 # cloudfoundry/bosh # Cloud Foundry BOSH is an open source tool for release engineering, deployment, lifecycle management, and monitoring of distributed systems.&#xA;cloudfoundry/cli # The official command line client for Cloud Foundry https://docs.cloudfoundry.org/cf-cli&#xA;cloudfoundry/uaa # CloudFoundry User Account and Authentication (UAA) Server&#xA;Cloud Foundry 缺点 # 诸如 Cloud Foundry 的 PaaS，用户必须为不同语言、不同框架区分不同的打包方式，这个打包过程是非常具有灾难性的。 而现实往往更糟糕，当在本地跑的好好的应用，由于和远端环境的不一致，在打包后却需要在云端各种调试，最终才能让应用 “平稳” 运行。&#xA;而 Docker 的出现改变了一切，它凭借镜像解决了这个问题。Docker 一不做二不休，干脆把完整的操作系统目录也打包进去，如此高的集成度，保证了云端和本地环境的高度一致，并且随时随地轻易地移植。&#xA;参考：&#xA;Kubernetes 如何打赢容器之战？ </description>
    </item>
    <item>
      <title>Gloo</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/gloo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/gloo/</guid>
      <description>Gloo # solo-io/gloo The Feature-rich, Kubernetes-native, Next-Generation API Gateway Built on Envoy</description>
    </item>
    <item>
      <title>RDS</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/envoy/xds/rds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/envoy/xds/rds/</guid>
      <description> RDS # </description>
    </item>
    <item>
      <title>Zipkin</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/tracing/zipkin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/tracing/zipkin/</guid>
      <description>Zipkin # openzipkin/zipkin Zipkin is a distributed tracing system https://zipkin.io/</description>
    </item>
    <item>
      <title>依赖倒置原则</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/principle/dip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/principle/dip/</guid>
      <description> 依赖倒置原则 # 模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的。 即依赖抽象，而不依赖具体的实现。 </description>
    </item>
    <item>
      <title>原型</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/prototype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/prototype/</guid>
      <description> 原型模式 # Prototype&#xA;代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>版本</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/envoy/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/envoy/version/</guid>
      <description> Envoy 版本 # 参考： https://www.envoyproxy.io/docs/envoy/v1.15.0/version_history/version_history&#xA;1.17 # 1.17.1 # 1.17.0 # 1.16 # 1.16.2 # 1.16.0 (2020-10-08) # 1.15 # 1.15.0 (2020-07-06) # 1.14 # 1.14.3 (2020-06-30) # 1.14.2 (2020-06-08) # 1.14.0 (2020-04-08) # 1.13 # 1.13.3 (2020-06-30) # 1.13.0 (2020-01-20) # 1.12 # 1.12.5 (2020-06-30) # 1.12.1 (2019-11-08) # 1.5 (2017-12-04) # 1.4 (2017-08-24) # 1.3 (2017-05-17) # 1.2 (2017-03-07) # 1.1 (2016-11-30) # 1.0 (2016-09-12) # </description>
    </item>
    <item>
      <title>版本</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/basic/other/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/basic/other/version/</guid>
      <description> Istio 版本 # istio/istio 参考： https://istio.io/news/releases/&#xA;1.7 # 1.6 # 1.6.5 (2020-07-09) # 1.6.0 (2020-05-21) # 1.5 # 1.5.8 (2020-07-09) # 1.5.0 (2020-03-05) # 1.4 # 1.4.0 (2019-11-14) # 1.3 # 1.2 # 1.1 # 1.0 # 0.x # 0.8 (2018-06-01) # 0.2 (2017-10-10) # 0.1 (2017-05-24) # </description>
    </item>
    <item>
      <title>装饰</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/structural/decorator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/structural/decorator/</guid>
      <description> 装饰模式 # Decorator&#xA;代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>迭代器</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/iterator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/iterator/</guid>
      <description> 迭代器模式 # Iterator Pattern&#xA;代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>AppFog</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/others/paas/appfog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/others/paas/appfog/</guid>
      <description> AppFog # </description>
    </item>
    <item>
      <title>Flink</title>
      <link>https://kingye.me/note-cs/docs/domain/bigdata/flink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/bigdata/flink/</guid>
      <description> Flink # </description>
    </item>
    <item>
      <title>HBase</title>
      <link>https://kingye.me/note-cs/docs/domain/bigdata/hadoop/hbase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/bigdata/hadoop/hbase/</guid>
      <description> HBase # apache/hbase </description>
    </item>
    <item>
      <title>HDFS</title>
      <link>https://kingye.me/note-cs/docs/domain/bigdata/hadoop/hdfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/bigdata/hadoop/hdfs/</guid>
      <description> HDFS # </description>
    </item>
    <item>
      <title>Istio Ingress</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/ingress/istio-ingress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/ingress/istio-ingress/</guid>
      <description> Istio Ingress # </description>
    </item>
    <item>
      <title>kubernetes/ingress-nginx</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/ingress/ingress-nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/ingress/ingress-nginx/</guid>
      <description>NGINX Ingress Controller # kubernetes/ingress-nginx NGINX Ingress Controller for Kubernetes https://kubernetes.github.io/ingress-nginx/</description>
    </item>
    <item>
      <title>MapReduce</title>
      <link>https://kingye.me/note-cs/docs/domain/bigdata/hadoop/mapreduce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/bigdata/hadoop/mapreduce/</guid>
      <description> MapReduce # </description>
    </item>
    <item>
      <title>Packer</title>
      <link>https://kingye.me/note-cs/docs/direction/be/devops/packer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/devops/packer/</guid>
      <description>Packer # hashicorp/packer Packer is a tool for creating identical machine images for multiple platforms from a single source configuration. http://www.packer.io/</description>
    </item>
    <item>
      <title>PHP</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/php/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/php/</guid>
      <description>PHP # 更多内容见：PHP 学习笔记</description>
    </item>
    <item>
      <title>Spark</title>
      <link>https://kingye.me/note-cs/docs/domain/bigdata/spark/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/bigdata/spark/</guid>
      <description> Spark # apache/spark </description>
    </item>
    <item>
      <title>一致性哈希</title>
      <link>https://kingye.me/note-cs/docs/direction/be/distributed/consistent-hashing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/distributed/consistent-hashing/</guid>
      <description> 一致性哈希 # 这篇论文中提出了一致性 hash 的概念。&#xA;incubator-brpc doc - 一致性哈希&#xA;一致性 hash 满足以下四个性质：&#xA;平衡性 (Balance) : 每个节点被选到的概率是 O (1/n)。 单调性 (Monotonicity) : 当新节点加入时， 不会有请求在老节点间移动， 只会从老节点移动到新节点。当有节点被删除时，也不会影响落在别的节点上的请求。 分散性 (Spread) : 当上游的机器看到不同的下游列表时 (在上线时及不稳定的网络中比较常见), 同一个请求尽量映射到少量的节点中。 负载 (Load) : 当上游的机器看到不同的下游列表的时候， 保证每台下游分到的请求数量尽量一致。 </description>
    </item>
    <item>
      <title>中介者</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/mediator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/mediator/</guid>
      <description> 中介者模式 # Mediator Pattern&#xA;代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>分布式事务</title>
      <link>https://kingye.me/note-cs/docs/direction/be/distributed/transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/distributed/transaction/</guid>
      <description>分布式事务 # 微服务化带来的分布式事务问题 # 每一个服务内部的数据一致性仍由本地事务来保证。而整个业务层面的全局数据一致性要如何保障呢？&#xA;解决方案 # 分布式事务的实现主要有以下 5 种方案：&#xA;XA 方案 TCC 方案 本地消息表 可靠消息最终一致性方案 最大努力通知方案 如果你真的被问到，可以这么说，我们某某特别严格的场景，用的是 TCC 来保证强一致性；然后其他的一些场景基于阿里的 RocketMQ 来实现分布式事务。&#xA;你找一个严格资金要求绝对不能错的场景，你可以说你是用的 TCC 方案；如果是一般的分布式事务场景，订单插入之后要调用库存服务更新库存，库存数据没有资金那么的敏感，可以用可靠消息最终一致性方案。&#xA;友情提示一下，RocketMQ 3.2.6 之前的版本，是可以按照上面的思路来的，但是之后接口做了一些改变，我这里不再赘述了。&#xA;当然如果你愿意，你可以参考可靠消息最终一致性方案来自己实现一套分布式事务，比如基于 RocketMQ 来玩儿。&#xA;参考：&#xA;分布式事务了解吗？你们是如何解决分布式事务问题的？ XA 方案 # 两阶段提交方案&#xA;有一个事务管理器的概念，负责协调多个数据库（资源管理器）的事务，事务管理器先问问各个数据库你准备好了吗？ 如果每个数据库都回复 ok，那么就正式提交事务，在各个数据库上执行操作；如果任何其中一个数据库回答不 ok，那么就回滚事务。&#xA;这种分布式事务方案，比较适合单块应用里，跨多个库的分布式事务，而且因为严重依赖于数据库层面来搞定复杂的事务，效率很低，绝对不适合高并发的场景。&#xA;如果要玩儿，那么基于 Spring + JTA 就可以搞定，自己随便搜个 demo 看看就知道了。&#xA;这个方案，我们很少用，一般来说某个系统内部如果出现跨多个库的这么一个操作，是不合规的。&#xA;TCC # 这种方案说实话几乎很少人使用， 因为这个事务回滚实际上是严重依赖于你自己写代码来回滚和补偿了，会造成补偿代码巨大，非常之恶心，业务代码是很难维护的。&#xA;比如说我们，一般来说跟钱相关的，跟钱打交道的，支付、交易相关的场景，我们会用 TCC，严格保证分布式事务要么全部成功，要么全部自动回滚，严格保证资金的正确性，保证在资金上不会出现问题。&#xA;而且最好是你的各个业务执行的时间都比较短。&#xA;TCC 分布式事务框架，比如国内开源的&#xA;ByteTCC himly tcc-transaction Try # 首先你的业务的主流程以及各个接口提供的业务含义，不是说直接完成那个业务操作，而是完成一个 Try 的操作。&#xA;这个操作，一般都是锁定某个资源，设置一个预备类的状态，冻结部分数据，等等，大概都是这类操作。&#xA;Confirm # Cancel # 参考：</description>
    </item>
    <item>
      <title>单例</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/singleton/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/creational/singleton/</guid>
      <description>单例模式 # Singleton&#xA;实现方法 # 初始化时即创建单例 饿汉式 枚举类型 按需，延迟创建单例 懒汉式 基础实现 同步锁 双重检验锁 静态内部类实现 饿汉式（线程安全） # JVM 在类的初始化阶段 (即 在 Class 被加载后、被线程使用前)，会执行类的初始化 在执行类的初始化期间，JVM 会去获取一个锁，这个锁可以同步多个线程对同一个类的初始化 class Singleton { // 1. 加载该类时，单例就会自动被创建 private static Singleton ourInstance = new Singleton(); // 2. 构造函数设置为 私有权限，禁止他人创建实例 private Singleton() { } // 3. 通过调用静态方法获得创建的单例 public static Singleton newInstance() { return ourInstance; } } 应用场景&#xA;单例对象要求初始化速度快，占用内存小 枚举类（线程安全） # 这是最简洁，最易用的单例实现方式 单元素的枚举类型已经成为实现 Singleton 的最佳方法 - 《Effective Java》&#xA;public enum Singleton { // 定义 1 个枚举的元素，即为单例类的1个实例 INSTANCE; // 隐藏了 1 个空的、私有的 构造方法 // private Singleton () {} } // 获取单例的方式： Singleton singleton = Singleton.</description>
    </item>
    <item>
      <title>在线编程</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/tool/study/coding-online/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/tool/study/coding-online/</guid>
      <description> 在线编程 # </description>
    </item>
    <item>
      <title>外观</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/structural/facade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/structural/facade/</guid>
      <description> 外观模式 # Facade&#xA;适配器是将接口转换为不同接口 外观模式是提供一个统一的接口来简化接口 public class Facade Pattern { public static void main(String[] args) { //实例化电器类 SubSystemA_Light light = new SubSystemA_Light(); SubSystemB_Television television = new SubSystemB_Television(); SubSystemC_Aircondition aircondition = new SubSystemC_Aircondition(); //传参 Facade facade = new Facade(light,television,aircondition); //客户端直接与外观对象进行交互 facade.on; System.out.prinln(&amp;#34;可以看电视了&amp;#34;)； facade.off; System.out.prinln(&amp;#34;可以睡觉了&amp;#34;)； } } 代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>接口隔离原则</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/principle/isp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/principle/isp/</guid>
      <description> 接口隔离原则 # 客户端不应该依赖它不需要的接口。 目的是解开系统的耦合，从而容易重构更改。 </description>
    </item>
    <item>
      <title>版本</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/assembly/basic/others/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/assembly/basic/others/version/</guid>
      <description> 版本 # 版本历史 # </description>
    </item>
    <item>
      <title>版本</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/csharp/basic/others/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/csharp/basic/others/version/</guid>
      <description> 版本 # 版本历史 # </description>
    </item>
    <item>
      <title>版本</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/erlang/basic/others/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/erlang/basic/others/version/</guid>
      <description> 版本 # 版本历史 # </description>
    </item>
    <item>
      <title>版本</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/haskell/basic/others/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/haskell/basic/others/version/</guid>
      <description> 版本 # 版本历史 # </description>
    </item>
    <item>
      <title>版本</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/lua/basic/others/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/lua/basic/others/version/</guid>
      <description> 版本 # 版本历史 # </description>
    </item>
    <item>
      <title>版本</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/objective-c/basic/others/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/objective-c/basic/others/version/</guid>
      <description> 版本 # 版本历史 # </description>
    </item>
    <item>
      <title>版本</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/r/basic/others/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/r/basic/others/version/</guid>
      <description> 版本 # 版本历史 # </description>
    </item>
    <item>
      <title>版本</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/ruby/basic/others/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/ruby/basic/others/version/</guid>
      <description> 版本 # 版本历史 # </description>
    </item>
    <item>
      <title>版本</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/scala/basic/others/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/scala/basic/others/version/</guid>
      <description> 版本 # 版本历史 # </description>
    </item>
    <item>
      <title>版本</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/swift/basic/others/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/swift/basic/others/version/</guid>
      <description> 版本 # 版本历史 # </description>
    </item>
    <item>
      <title>版本</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/zig/basic/others/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/zig/basic/others/version/</guid>
      <description> 版本 # 版本历史 # </description>
    </item>
    <item>
      <title>简单工厂</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/other/simple-factory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/other/simple-factory/</guid>
      <description> 简单工厂模式 # Simple Factory Pattern，又称为静态工厂方法 (Static Factory Method) 模式&#xA;通过传入参数获取到对象，不关心创建对象的细节。&#xA;// create 是静态方法，直接用类调用（不需要实例化） object1 = Factory.create(1); object2 = Factory.create(2); 优点&#xA;将创建实例的工作与使用实例的工作分开，使用者不必关心类对象如何创建，实现了解耦； 把初始化实例时的工作放到工厂里进行，使代码更容易维护。更符合面向对象的原则 &amp;amp; 面向接口编程，而不是面向实现编程。 缺点&#xA;工厂类集中了所有实例（产品）的创建逻辑，一旦这个工厂不能正常工作，整个系统都会受到影响； 违背 “开放 - 关闭原则”，一旦添加新产品就不得不修改工厂类的逻辑，这样就会造成工厂逻辑过于复杂。 简单工厂模式由于使用了静态工厂方法，静态方法不能被继承和重写，会造成工厂角色无法形成基于继承的等级结构。 静态方法可以被继承 应用场景&#xA;客户如果只知道传入工厂类的参数，对于如何创建对象的逻辑不关心时； 当工厂类负责创建的对象（具体产品）比较少时。 代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>Python</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/python/</guid>
      <description>Python # 更多内容见：Python 学习笔记</description>
    </item>
    <item>
      <title>haproxy</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/haproxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/haproxy/</guid>
      <description>Haproxy # haproxy/haproxy HAProxy Load Balancer&amp;rsquo;s development branch (mirror of git.haproxy.org) https://git.haproxy.org/</description>
    </item>
    <item>
      <title>Haproxy Ingress</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/ingress/haproxy-ingress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/ingress/haproxy-ingress/</guid>
      <description> Haproxy Ingress # jcmoraisjr/haproxy-ingress # jcmoraisjr/haproxy-ingress </description>
    </item>
    <item>
      <title>MOSN</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/mosn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/mosn/</guid>
      <description>MOSN # mosn/mosn MOSN is a cloud native proxy for edge or service mesh. https://mosn.io</description>
    </item>
    <item>
      <title>Rust</title>
      <link>https://kingye.me/note-cs/docs/basic/pl/rust/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/pl/rust/</guid>
      <description>Rust # 更多内容见：Rust 学习笔记</description>
    </item>
    <item>
      <title>享元</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/structural/flyweight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/structural/flyweight/</guid>
      <description> 享元模式 # Flyweight&#xA;代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>回忆</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/memento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/memento/</guid>
      <description> 回忆模式 # Memento Pattern&#xA;代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>职责链</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/chain-of-responsibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/chain-of-responsibility/</guid>
      <description> 职责链模式 # Chain-of-responsibility Pattern&#xA;代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>迪米特原则</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/principle/lod/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/principle/lod/</guid>
      <description> 迪米特原则 # 一个对象应该对其他对象有最少的了解 一个类应该对自己需要耦合或调用的类知道的越少越好，类的内部如何实现与调用者或依赖者没关系。 </description>
    </item>
    <item>
      <title>2.7 测试</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/test/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/test/test/</guid>
      <description>测试 # open-policy-agent/conftest # Write tests against structured configuration data using the Open Policy Agent Rego query language</description>
    </item>
    <item>
      <title>Dapr</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/dapr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/dapr/</guid>
      <description>Dapr # Distributed Application Runtime&#xA;dapr/dapr Dapr is a portable, serverless, event-driven runtime that makes it easy for developers to build resilient, stateless and stateful microservices that run on the cloud and edge and embraces the diversity of languages and developer frameworks.</description>
    </item>
    <item>
      <title>LightStep</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/tracing/lightstep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/tracing/lightstep/</guid>
      <description> LightStep # https://lightstep.com/&#xA;lightstep-tracer-go # lightstep/lightstep-tracer-go </description>
    </item>
    <item>
      <title>MinIO</title>
      <link>https://kingye.me/note-cs/docs/direction/be/db/minio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/db/minio/</guid>
      <description> MinIO # MinIO 是开源 (AGPL v3.0 协议) 高性能对象存储，提供了 Amazon S3 云存储服务兼容的 API，可以用于处理非结构化数据，例如图片、视频、日志文件，备份和容器镜像。最大支持 5TB 对象。&#xA;专注于高性能，但简化了架构 (相比较 GlusterFS 和 Ceph)，所以不支持动态扩展 (提供有限的扩展运维能力) </description>
    </item>
    <item>
      <title>代理</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/structural/proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/structural/proxy/</guid>
      <description>代理模式 # Proxy&#xA;public interface Subject { public void buyMac(); } public class RealSubject implement Subject { @Override public void buyMac() { System.out.println(&amp;#34;买一台Mac&amp;#34;); } } public class Proxy implements Subject { @Override public void buyMac { //引用并创建真实对象实例，即&amp;#34;我&amp;#34; RealSubject realSubject = new RealSubject(); //调用真实对象的方法，进行代理购买Mac realSubject.buyMac(); //代理对象额外做的操作 this.WrapMac(); } public void WrapMac() { System.out.println(&amp;#34;用盒子包装好Mac&amp;#34;); } } public class ProxyPattern { public static void main(String[] args) { Subject proxy = new Proxy(); proxy.</description>
    </item>
    <item>
      <title>缓存</title>
      <link>https://kingye.me/note-cs/docs/direction/se/arch/scene/cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/arch/scene/cache/</guid>
      <description>缓存 # 热点数据集中失效问题&#xA;设置不同的失效时间 互斥锁 缓存穿透 # 查询不存在的数据&#xA;布隆过滤器 把这个空结果进行缓存。 缓存雪崩 # 当某一时刻发生大规模的缓存失效的情况，比如你的缓存服务宕机了，会有大量的请求进来直接打到 DB 上面。结果就是 DB 称不住，挂掉。&#xA;解决 # 事前：使用集群缓存，保证缓存服务的高可用 事中：ehcache 本地缓存 + Hystrix 限流 &amp;amp; 降级，避免 MySQL 被打死 事后：开启 Redis 持久化机制，尽快恢复缓存集群 参考：&#xA;ehcache/ehcache3 缓存击穿 # 在平常高并发的系统中，大量的请求同时查询一个 key 时，此时这个 key 正好失效了， 就会导致大量的请求都打到数据库上面去。&#xA;缓存击穿实际上是缓存雪崩的一个特例&#xA;解决 # 问题是多个线程同时去查询数据库的这条数据， 我们可以在第一个查询数据的请求上使用一个互斥锁来锁住它。 其他的线程走到这一步拿不到锁就等着，等第一个线程查询到了数据，然后做缓存。 后面的线程进来发现已经有缓存了，就直接走缓存。</description>
    </item>
    <item>
      <title>观察者</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/observer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/observer/</guid>
      <description> 观察者模式 # Observer Pattern&#xA;代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>BFE</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/bfe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/bfe/</guid>
      <description> BFE # bfenetworks/bfe # </description>
    </item>
    <item>
      <title>brpc</title>
      <link>https://kingye.me/note-cs/docs/direction/be/microservices/rpc/brpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/microservices/rpc/brpc/</guid>
      <description> brpc # </description>
    </item>
    <item>
      <title>Chef</title>
      <link>https://kingye.me/note-cs/docs/direction/be/devops/chef/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/devops/chef/</guid>
      <description>Chef # chef/chef Chef Infra, a powerful automation platform that transforms infrastructure into code automating how infrastructure is configured, deployed and managed across any environment, at any scale http://www.chef.io/chef/</description>
    </item>
    <item>
      <title>Cilium</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/cilium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/cilium/</guid>
      <description>Cilium # cilium/cilium eBPF-based Networking, Security, and Observability</description>
    </item>
    <item>
      <title>Consul</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/consul/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/consul/</guid>
      <description>Consul # hashicorp/consul Consul is a distributed, highly available, and data center aware solution to connect and configure applications across dynamic, distributed infrastructure. https://www.consul.io/</description>
    </item>
    <item>
      <title>Jenkins</title>
      <link>https://kingye.me/note-cs/docs/direction/be/devops/Jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/devops/Jenkins/</guid>
      <description>Jenkins # jenkinsci/jenkins Jenkins automation server https://www.jenkins.io/</description>
    </item>
    <item>
      <title>Pulumi</title>
      <link>https://kingye.me/note-cs/docs/direction/be/devops/pulumi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/devops/pulumi/</guid>
      <description>Pulumi # pulumi/pulumi Pulumi - Modern Infrastructure as Code. Any cloud, any language https://www.pulumi.com/</description>
    </item>
    <item>
      <title>Puppet</title>
      <link>https://kingye.me/note-cs/docs/direction/be/devops/puppet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/devops/puppet/</guid>
      <description>Puppet # puppetlabs/puppet Server automation framework and application https://puppet.com/open-source/#osp</description>
    </item>
    <item>
      <title>SaltStack</title>
      <link>https://kingye.me/note-cs/docs/direction/be/devops/saltstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/be/devops/saltstack/</guid>
      <description>SaltStack # saltstack/salt Software to automate the management and configuration of any infrastructure or application at scale. Get access to the Salt software package repository here: https://repo.saltstack.com/</description>
    </item>
    <item>
      <title>Traefik Mesh</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/traefik-mesh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/traefik-mesh/</guid>
      <description>Traefik Mesh # traefik/mesh Consul is a distributed, highly available, and data center aware solution to connect and configure applications across dynamic, distributed infrastructure. https://www.consul.io/</description>
    </item>
    <item>
      <title>状态机</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/state/</guid>
      <description> 状态机模式 # State Pattern&#xA;代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>Jquery</title>
      <link>https://kingye.me/note-cs/docs/direction/fe/frame/jquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/fe/frame/jquery/</guid>
      <description> Jquery # </description>
    </item>
    <item>
      <title>nginxinc/kubernetes-ingress</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/ingress/kubernetes-ingress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/ingress/kubernetes-ingress/</guid>
      <description> NGINX Ingress Controller # nginxinc/kubernetes-ingress NGINX and NGINX Plus Ingress Controllers for Kubernetes https://docs.nginx.com/nginx-ingress-controller/&#xA;nginxinc/kubernetes-ingress vs kubernetes/ingress-nginx # 参考：&#xA;Differences Between nginxinc/kubernetes-ingress and kubernetes/ingress-nginx Ingress Controllers </description>
    </item>
    <item>
      <title>策略</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/strategy/</guid>
      <description> 策略模式 # Strategy Pattern&#xA;代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>.NET</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/dotnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/dotnet/</guid>
      <description> .NET # .NET 8.0 SDK (v8.0.100) - macOS Arm64 Installer!&#xA;# 安装 .NET SDK brew install --cask dotnet-sdk </description>
    </item>
    <item>
      <title>ab</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/ab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/ab/</guid>
      <description>ab # apt install apache2-utils -y # -c 10 表示并发用户数为10 # -n 100 表示请求总数为100 ab -c 10 -n 100 http://localhost:8080 # This is ApacheBench, Version 2.3 &amp;lt;$Revision: 1879490 $&amp;gt; # Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ # Licensed to The Apache Software Foundation, http://www.apache.org/ # Benchmarking localhost (be patient) # Completed 100 requests # Completed 200 requests # Completed 300 requests # Completed 400 requests # Completed 500 requests # Completed 600 requests # Completed 700 requests # Completed 800 requests # Completed 900 requests # Completed 1000 requests # Finished 1000 requests # Server Software: # Server Hostname: localhost # Server Port: 8080 # Document Path: / # Document Length: 12 bytes # Concurrency Level: 100 # Time taken for tests: 0.</description>
    </item>
    <item>
      <title>adb</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/adb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/adb/</guid>
      <description> adb # 安装 # brew install android-platform-tools 教程 # # 启动 adb devices </description>
    </item>
    <item>
      <title>apt</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/apt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/apt/</guid>
      <description>apt # apt vs apt-get # Advanced Package Tool，又名 apt-get，是一款适用于 Unix 和 Linux 系统的应用程序管理器&#xA;apt 可以看作 apt-get 和 apt-cache 命令的子集, 可以为包管理提供必要的命令选项 可以用 apt 替换部分 apt-get 系列命令，但不是全部 对于低级操作，仍然需要 apt-get 作为普通用户，可以首先使用 apt apt 命令 取代的命令 命令的功能 apt install apt-get install 安装软件包 apt remove apt-get remove 移除软件包 apt purge apt-get purge 移除软件包及配置文件 apt update apt-get update 刷新存储库索引 apt upgrade apt-get upgrade 升级所有可升级的软件包 apt autoremove apt-get autoremove 自动删除不需要的包 apt full-upgrade apt-get dist-upgrade 在升级软件包时自动处理依赖关系 apt search apt-cache search 搜索应用程序 apt show apt-cache show 显示装细节 apt 还有一些自己的命令</description>
    </item>
    <item>
      <title>AsciiDoc</title>
      <link>https://kingye.me/note-cs/docs/study/skill/type/asciidoc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/type/asciidoc/</guid>
      <description> AsciiDoc # 表格内无序列表 # | 前面加个 a&#xA;参考：&#xA;Format Content by Cell 教程 # AsciiDoc 指引 </description>
    </item>
    <item>
      <title>Axure</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/axure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/axure/</guid>
      <description> Axure RP # Rapid Prototyping 快速原型&#xA;快捷键 # cmd + D: 副本 cmd + R: 替换 </description>
    </item>
    <item>
      <title>C#</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/csharp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/csharp/</guid>
      <description>C# # 使用 Visual Studio Code 写 C# 程序 # C# Dev Kit # C# Dev Kit helps you manage your code with a solution explorer and test your code with integrated unit test discovery and execution, elevating your C# development experience wherever you like to develop (Windows, macOS, Linux, and even in a Codespace).&#xA;This extension builds on top of the great C# language capabilities provided by the C# extension, 即 vscode-csharp and enhances your C# environment by adding a set of powerful tools and utilities that integrate natively with VS Code to help C# developers write, debug, and maintain their code faster and with fewer errors.</description>
    </item>
    <item>
      <title>Capslock</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/capslock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/capslock/</guid>
      <description>Capslock # Vonng/Capslock 让 Capslock 再次伟大！</description>
    </item>
    <item>
      <title>Cargo</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/cargo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/cargo/</guid>
      <description> Cargo # 常用命令 # 安装配置 # curl https://sh.rustup.rs -sSf | sh&#xA;参考：&#xA;The Cargo Book </description>
    </item>
    <item>
      <title>Conda</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/conda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/conda/</guid>
      <description>Conda # conda 是一款软件管理软件，相当于 windows 里面的应用商店 miniconda 和 anaconda 中都包含了 conda miniconda windows 64 位安装包大小为 51.4 Mb，只包含了 conda、python、和一些必备的软件工具 anaconda windows 64 位安装包大小为 462 Mb，是 miniconda 的扩展，包含了数据科学和机器学习要用到的很多软件。 使用教程 # # 清理缓存 conda clean -a # The base environment is activated by default conda config --set auto_activate_base True # The base environment is not activated by default conda config --set auto_activate_base False # 查看已创建的conda环境 conda info --envs # 激活环境 conda activate base # 退出环境 conda deactivate 镜像源 # 阿里云 # cat &amp;lt;&amp;lt; EOF &amp;gt; ~/.</description>
    </item>
    <item>
      <title>Containerd</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/containerd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/containerd/</guid>
      <description>Containerd # # 生成一个默认的配置 mkdir /etc/containerd containerd config default &amp;gt; /etc/containerd/config.toml 配置 # disabled_plugins = [] imports = [] oom_score = 0 plugin_dir = &amp;#34;&amp;#34; required_plugins = [] root = &amp;#34;/var/lib/containerd&amp;#34; state = &amp;#34;/run/containerd&amp;#34; temp = &amp;#34;&amp;#34; version = 2 [cgroup] path = &amp;#34;&amp;#34; [debug] address = &amp;#34;&amp;#34; format = &amp;#34;&amp;#34; gid = 0 level = &amp;#34;&amp;#34; uid = 0 [grpc] address = &amp;#34;/run/containerd/containerd.sock&amp;#34; gid = 0 max_recv_message_size = 16777216 max_send_message_size = 16777216 tcp_address = &amp;#34;&amp;#34; tcp_tls_ca = &amp;#34;&amp;#34; tcp_tls_cert = &amp;#34;&amp;#34; tcp_tls_key = &amp;#34;&amp;#34; uid = 0 [metrics] address = &amp;#34;&amp;#34; grpc_histogram = false [plugins] [plugins.</description>
    </item>
    <item>
      <title>CPU</title>
      <link>https://kingye.me/note-cs/docs/basic/cc/cpu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/cc/cpu/</guid>
      <description> CPU # 参考：&#xA;史上最全桌面级 CPU 天梯图 </description>
    </item>
    <item>
      <title>crictl</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/crictl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/crictl/</guid>
      <description>crictl # crictl 是 CRI 兼容的容器运行时命令行接口，用来检查和调试 Kubernetes 节点上的容器运行时和应用程序 kubernetes-sigs/cri-tools crictl 不支持改镜像 tag&#xA;crictl 不支持 load 镜像文件&#xA;需要用 ctr&#xA;# namespace 为 k8s.io ctr -n=k8s.io image pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.6 ctr -n=k8s.io image tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.6 registry.k8s.io/pause:3.6 参考：&#xA;Crictl not support load images? Manually Loading Container Images with containerD 安装 # VERSION=&amp;#34;v1.26.0&amp;#34; wget https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-$VERSION-linux-amd64.tar.gz sudo tar zxvf crictl-$VERSION-linux-amd64.tar.gz -C /usr/local/bin # rm -f crictl-$VERSION-linux-amd64.tar.gz # 默认是使用 docker # 配置使用 containerd cat &amp;lt;&amp;lt; EOF &amp;gt; /etc/crictl.</description>
    </item>
    <item>
      <title>ctr</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/ctr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/ctr/</guid>
      <description>ctr # ctr 是 containerd 自带的 CLI 命令行工具 ctr image pull 的镜像，namespace 必须是 k8s.io，containerd 才能使用（crictl image 才能看到） ctr -n k8s.io image list ctr -n k8s.io image pull # namespace ctr ns ls # 删除镜像 ctr -n k8s.io i rm $(ctr -n k8s.io i ls -q) # 删除容器 ctr -n k8s.io c rm $(ctr -n k8s.io c ls -q) ctr -n k8s.io image pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.6 # tag 重命名 ctr -n k8s.</description>
    </item>
    <item>
      <title>CUDA</title>
      <link>https://kingye.me/note-cs/docs/basic/cc/gpu/cuda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/cc/gpu/cuda/</guid>
      <description>CUDA # nvcc -V 显示的当前安装的 cuda 版本 nvcc: NVIDIA (R) Cuda compiler driver 我们常说的 cuda 指的是 nvidia cuda toolkit 软件开发包，而不是 GPU 驱动 cuda 版本也即 CUDA 工具包的版本，而不是显卡驱动版本 cuda 每个版本都对应一个最低版本的显卡驱动程序 cuda 程序是向后兼容的，针对特定版本的 CUDA 编译的应用程序将继续在后续驱动程序版本上工作 最新 nvidia 驱动版本支持所有版本的 CUDA GPU核心和CUDA核心通常指的是同一个概念。在NVIDIA的术语中，CUDA核心是GPU上的处理单元，负责执行计算任务。 nvidia driver 和 cuda toolkit 版本兼容性 # CUDA Toolkit runtime, libraries, tools Nvidia Display Driver Package CUDA user-mode driver (libcuda.so) GPU kernel-mode driver (nvidia.ko) 参考：CUDA Compatibility&#xA;安装 # # ubuntu 20.04, x86_64 wget https://developer.</description>
    </item>
    <item>
      <title>Dash</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/dash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/dash/</guid>
      <description> Dash # </description>
    </item>
    <item>
      <title>DMI</title>
      <link>https://kingye.me/note-cs/docs/basic/cc/dmi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/cc/dmi/</guid>
      <description>DMI # 直接媒体接口（英语：Direct Media Interface，DMI）是英特尔专用的总线，用于电脑主板上南桥芯片和北桥芯片之间的连接。 DMI 的首次应用是作为 2004 年推出的英特尔 900 系列北桥芯片与 ICH6 南桥芯片之间的连接接口。&#xA;DMI 1.0, introduced in 2004. DMI 2.0, introduced in 2011, doubles the data transfer rate to 2 GB/s with a ×4 link. It is used to link an Intel CPU with the Intel Platform Controller Hub (PCH), which supersedes the historic implementation of a separate northbridge and southbridge.: 14 DMI 3.0, released in August 2015, allows the 8 GT/s transfer rate per lane, for a total of four lanes and 3.</description>
    </item>
    <item>
      <title>Docker</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/docker/</guid>
      <description>Docker # 使用 # # 停止 docker systemctl stop docker.socket 安装 # # Uninstall old versions sudo apt-get remove docker docker-engine docker.io containerd runc # Update the apt package index and install packages to allow apt to use a repository over HTTPS sudo apt-get update sudo apt-get install -y \ ca-certificates \ curl \ gnupg \ lsb-release # Add Docker’s official GPG key sudo mkdir -p /etc/apt/keyrings curl -fsSL https://download.</description>
    </item>
    <item>
      <title>FAQ</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/basic/quick/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/basic/quick/faq/</guid>
      <description> FAQ # Istio 如何实现 Sidecar 注入？ # Istio 如何实现流量管理？ # 如何拦截流量 intercept traffic&#xA;Istio 是在哪一层实现流量管理？为什么要在那一层？ # Layer7 routing&#xA;Istio 如何实现 mTLS 认证？ # </description>
    </item>
    <item>
      <title>feh</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/feh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/feh/</guid>
      <description> feh # feh: image viewer and cataloguer&#xA;安装 # sudo apt install feh feh ERROR: Can&amp;rsquo;t open X display. # lsix # hackerb9/lsix Like &amp;ldquo;ls&amp;rdquo;, but for images. Shows thumbnails in terminal using sixel graphics.&#xA;# 安装 sudo apt-get install imagemagick sudo curl -Lo /usr/local/bin/lsix https://github.com/hackerb9/lsix/blob/1.8/lsix chmod +x /usr/local/bin/lsix </description>
    </item>
    <item>
      <title>Git</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/git/</guid>
      <description>Git # 分支 # # 本地仓库 分支引用 refs/heads/v1.0.0 # 远程跟踪分支引用, 远程仓库 origin 中有一个分支 v1.0.0 refs/remotes/origin/v1.0.0 # 标签引用，包括远程和本地 refs/tags/v1.0.0 tag # 远程 tag 被视为本地 tag 的一种，它们都存储在 refs/tags/ 路径下。当你从远程仓库拉取或推送 tag 时，Git 会自动同步这些 tag 到本地仓库中的 refs/tags/ 路径 分支和 tag 重名 # 远程有个 v1.0.0 tag，想基于它拉一个远程 v1.0.0 分支 # # 本地拉 v1.0.0 tag git fetch origin tag v1.0.0 # git fetch origin --tags # 基于 tag 拉 v1.0.0 分支, # git co -b 分支名 tag名 git co -b v1.</description>
    </item>
    <item>
      <title>GitHub</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/github/</guid>
      <description>GitHub # 设置代理 # git config --global http.proxy &amp;#34;http://127.0.0.1:8081&amp;#34; git config --global https.proxy &amp;#34;http://127.0.0.1:8081&amp;#34; # socks5 代理（如 Shadowsocks） git config --global http.proxy &amp;#34;socks5://127.0.0.1:1080&amp;#34; git config --global https.proxy &amp;#34;socks5://127.0.0.1:1080&amp;#34; # 取消代理 git config --global --unset http.proxy git config --global --unset https.proxy 学习 Github # Github Learning Lab # Introduction to GitHub # Github 工具 # cli/cli # GitHub’s official command line tool https://cli.github.com&#xA;github/hub # A command-line tool that makes git easier to use with GitHub.</description>
    </item>
    <item>
      <title>Goland</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/goland/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/goland/</guid>
      <description>Goland # 快捷键 # 跳转 # 指定行 cmd + L&#xA;指定文件 shift + cmd + O&#xA;返回光标上一个位置 cmd + opt + 方向键&#xA;查询 # 函数列表 cmd + f12&#xA;当前文件查询 cmd + F&#xA;当前文件替换 cmd + R&#xA;所有文件查询 shift + cmd + F&#xA;所有文件替换 shift + cmd + R&#xA;选择 # 选中下一个相同内容 ctrl + G 选中所有相同内容 ctrl + G 展开所有代码块 shift + cmd + = 折叠所有代码块 shift + cmd + - 折叠或展开当前代码块 cmd + .</description>
    </item>
    <item>
      <title>Gradio</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/gradio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/gradio/</guid>
      <description> Gradio # gradio-app/gradio import gradio as gr def greet(name): return &amp;#34;Hello &amp;#34; + name + &amp;#34;!&amp;#34; with gr.Blocks() as demo: output = gr.Textbox(label=&amp;#34;Output Box&amp;#34;) name = gr.Textbox(label=&amp;#34;Name&amp;#34;) greet_btn = gr.Button(&amp;#34;Greet&amp;#34;) greet_btn.click(fn=greet, inputs=name, outputs=output) demo.launch(share=True, server_name=&amp;#34;0.0.0.0&amp;#34;, server_port=8722) </description>
    </item>
    <item>
      <title>gvm</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/gvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/gvm/</guid>
      <description>gvm # moovweb/gvm 安装：&#xA;zsh &amp;lt; &amp;lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer) 使用：&#xA;$ gvm listall $ gvm list apt-get install bison make gcc -y # 使用二进制安装 gvm install go1.15.15 -B gvm install go1.16.15 -B gvm install go1.17.13 -B gvm install go1.18.9 -B gvm install go1.19.4 -B $ gvm use go1.15 $ gvm uninstall go1.15 # 使用二进制安装 $ gvm install go1.15 -B $ gvm install -h Invalid version: -h Usage: gvm install [version] [options] -s, --source=SOURCE Install Go from specified source.</description>
    </item>
    <item>
      <title>gvm</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/gvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/gvm/</guid>
      <description> gvm # moovweb/gvm 安装：&#xA;zsh &amp;lt; &amp;lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer) mac m1 # mac m1 使用 gvm 安装 arm64 版本的 go&#xA;file ~/.gvm/gos/go1.16.15/bin/go ~/.gvm/gos/go1.16.15/bin/go: Mach-O 64-bit executable arm64 参考：https://github.com/moovweb/gvm/issues/406&#xA;RROR: Couldn&#39;t remove pkgsets # gvm use go1.11.1 go clean -modcache gvm use go1.11.4 gvm uninstall go1.11.1 也可以手动删除&#xA;rm -rf ~/.gvm/pkgsets/go1.11.1 gvm uninstall go1.11.1 参考：&#xA;ERROR: Couldn&amp;rsquo;t remove pkgsets </description>
    </item>
    <item>
      <title>HHKB</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/hhkb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/hhkb/</guid>
      <description>HHKB 键盘 # Happy Hacking Keyboard&#xA;使用 # 方向键 # 右侧的 Fn 键 + [ / ; &#39;</description>
    </item>
    <item>
      <title>IntelliJ IDEA</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/idea/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/idea/</guid>
      <description>IntelliJ IDEA # 插件 # Alibaba Java Coding Guidelines # 教程 # xiaoxiunique/tool-tips # idea 中相见恨晚的技巧 https://atips.cn/idea/</description>
    </item>
    <item>
      <title>Java</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/java/</guid>
      <description> Java # apt install default-jdk # lts version sudo apt install -y openjdk-8-jdk sudo apt install -y openjdk-11-jdk sudo apt install -y openjdk-17-jdk # list java versions update-java-alternatives --list # java-1.8.0-openjdk-amd64 1081 /usr/lib/jvm/java-1.8.0-openjdk-amd64 # java-1.11.0-openjdk-amd64 1111 /usr/lib/jvm/java-1.11.0-openjdk-amd64 # java-1.17.0-openjdk-amd64 1711 /usr/lib/jvm/java-1.17.0-openjdk-amd64 cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; ~/.zshrc # switch java version alias javato8=&amp;#34;update-java-alternatives --set /usr/lib/jvm/java-1.8.0-openjdk-amd64&amp;#34; alias javato11=&amp;#34;update-java-alternatives --set /usr/lib/jvm/java-1.11.0-openjdk-amd64&amp;#34; alias javato17=&amp;#34;update-java-alternatives --set /usr/lib/jvm/java-1.17.0-openjdk-amd64&amp;#34; EOF zsh </description>
    </item>
    <item>
      <title>Jupyter</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/jupyter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/jupyter/</guid>
      <description>Jupyter # JupyterLab 包含了 Jupyter Notebook 所有功能，并升级增加了很多功能&#xA;pipenv install jupyterlab alias python-jupyter=&amp;#34;/Users/yewang/.local/share/virtualenvs/yewang-jvfc4aCO/bin/python&amp;#34; alias jupyter=&amp;#34;python-jupyter -m jupyter&amp;#34; alias jlab=&amp;#34;jupyter lab&amp;#34; alias jlist=&amp;#34;jupyter kernelspec list&amp;#34; 参考：&#xA;JupyterLab Installation 配置 # # vi ~/.jupyter/jupyter_notebook_config.py # 绝对路径 c.NotebookApp.notebook_dir = &amp;#39;/Users/yewang/note/kingye/jupyter&amp;#39; Jupyter Notebook vs Jupyter Lab # Jupyter Lab is a next-generation web-based user interface for Project Jupyter Jupyter Notebook Interface is a Web-based application for authoring documents that combine live-code with narrative text, equations and visualizations.</description>
    </item>
    <item>
      <title>k3d</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/k3d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/k3d/</guid>
      <description>k3d # rancher/k3d 常用命令 # k3d cluster create ecsp-test-1 --subnet &amp;#34;172.27.1.0/24&amp;#34; --api-port 10.232.205.41:8701 --servers 1 --agents 2 k3d cluster create ecsp-test-2 --subnet &amp;#34;172.27.2.0/24&amp;#34; --api-port 10.232.205.41:8702 k3d cluster create ecsp-test-3 --subnet &amp;#34;172.27.3.0/24&amp;#34; --api-port 10.232.205.41:8703 k3d cluster create ecsp-test-4 --subnet &amp;#34;172.27.4.0/24&amp;#34; --api-port 10.232.205.41:8704 k3d cluster create ecsp-test-5 --subnet &amp;#34;172.27.5.0/24&amp;#34; --api-port 10.232.205.41:8705 # yq01 k3d cluster create ecsp-edge-1 --subnet &amp;#34;172.27.1.0/24&amp;#34; --api-port 10.197.34.39:8001 --image rancher/k3s:v1.18.19-k3s1 --k3s-server-arg &amp;#39;--kube-apiserver-arg=service-node-port-range=8100-8199&amp;#39; -p &amp;#34;8100-8199:8100-8199@loadbalancer&amp;#34; --verbose k3d cluster create ecsp-edge-2 --subnet &amp;#34;172.</description>
    </item>
    <item>
      <title>Kiali</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/basic/quick/kiali/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/basic/quick/kiali/</guid>
      <description>Kiali # kiali/kiali Kiali project, observability for the Istio service mesh</description>
    </item>
    <item>
      <title>KubeEdge</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/kubeedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/kubeedge/</guid>
      <description> KubeEdge # 部署 # # ime-study3 keadm init --advertise-address=&amp;#34;120.241.124.226&amp;#34; --profile version=v1.13.0 --kube-config=/root/.kube/config kubectl get all -n kubeedge keadm gettoken # ime-study4 # namespace 必须是 k8s.io，containerd 才能使用，crictl image 才能看到 ctr -n=k8s.io image pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.6 ctr -n=k8s.io image tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.6 registry.k8s.io/pause:3.6 rm -rf /etc/kubeedge/ keadm join --cloudcore-ipport=&amp;#34;120.241.124.226:10000&amp;#34; --token=f76a721023f724ae4ff872c8ec9e04e672d4eb93d1327638526389267084629b.eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NzU3Mjk0MDl9.TrcHtDra2gwuBw-9Aa8aDkDK99n1JoxwYYz8Kv4ugPo --kubeedge-version=v1.13.0 </description>
    </item>
    <item>
      <title>KubeSphere</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/kubesphere/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/kubesphere/</guid>
      <description> KubeSphere # kubectl patch storageclass local-storage -p &amp;#39;{&amp;#34;metadata&amp;#34;: {&amp;#34;annotations&amp;#34;:{&amp;#34;storageclass.kubernetes.io/is-default-class&amp;#34;:&amp;#34;true&amp;#34;}}}&amp;#39; </description>
    </item>
    <item>
      <title>langflow</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/langflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/langflow/</guid>
      <description> langflow # langflow --host &amp;#34;0.0.0.0&amp;#34; --port 7865 </description>
    </item>
    <item>
      <title>Mas</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/mas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/mas/</guid>
      <description>mas-cli/mas # Each application in the Mac App Store has a product identifier which is also used for mas-cli commands. Using mas list will show all installed applications and their product identifiers.&#xA;$ mas list 446107677 Screens 407963104 Pixelmator 497799835 Xcode $ mas search Xcode 497799835 Xcode 688199928 Docs for Xcode 449589707 Dash 3 - API Docs &amp;amp; Snippets. Integrates with Xcode, Alfred, TextWrangler and many more. [...] $ mas install 808809998 ==&amp;gt; Downloading PaintCode 2 ==&amp;gt; Installed PaintCode 2 # If you want to install the first result that the search command returns, use the lucky command.</description>
    </item>
    <item>
      <title>MicroK8s</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/microk8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/microk8s/</guid>
      <description>MicroK8s # ubuntu/microk8s MicroK8s is a small, fast, single-package Kubernetes for developers, IoT and edge.&#xA;https://microk8s.io&#xA;安装 # snap install microk8s --classic snap install kubectl --classic # snap install microk8s --classic --channel=1.23/stable # snap install kubectl --classic --channel=1.23/stable mkdir -p ~/.kube microk8s config &amp;gt; ~/.kube/config microk8s enable dashboard dns ingress # 拉镜像 microk8s ctr image pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.7 # microk8s ctr image tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.7 k8s.gcr.io/pause:3.7 microk8s ctr image tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.7 registry.</description>
    </item>
    <item>
      <title>Mosquitto</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/mosquitto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/mosquitto/</guid>
      <description> Mosquitto # eclipse/mosquitto 安装 # apt install mosquitto -y apt install mosquitto-clients -y 使用 # # mosquitto_pub version 1.6.9 running on libmosquitto 1.6.9. mosquitto_pub {[-h host] [-p port] [-u username] [-P password] -t topic | -L URL} {-f file | -l | -n | -m message} [-c] [-k keepalive] [-q qos] [-r] [--repeat N] [--repeat-delay time] [-A bind_address] [-i id] [-I id_prefix] [-d] [--quiet] [-M max_inflight] [-u username [-P password]] [--will-topic [--will-payload payload] [--will-qos qos] [--will-retain]] [{--cafile file | --capath dir} [--cert file] [--key file] [--ciphers ciphers] [--insecure] [--tls-alpn protocol] [--tls-engine engine] [--keyform keyform] [--tls-engine-kpass-sha1]] [--psk hex-key --psk-identity identity [--ciphers ciphers]] [--proxy socks-url] [--property command identifier value] [-D command identifier value] </description>
    </item>
    <item>
      <title>Multipass</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/multipass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/multipass/</guid>
      <description>Multipass # canonical/multipass Multipass orchestrates virtual Ubuntu instances https://multipass.run&#xA;# 安装 snap install multipass # Find available images multipass find # 使用本地 image multipass launch --name k3s --mem 1G --disk 5G file://~/ubuntu-20.04-server-cloudimg-amd64.img # 默认就是 cpus 1, mem 1G, disk 5G # 参考：https://multipass.run/docs/launch-command multipass launch --name rd-node-1 --cpus 10 --mem 20G --disk 20G multipass launch --name rd-node-2 --cpus 10 --mem 20G --disk 20G multipass launch --name qa-node-1 --cpus 10 --mem 20G --disk 20G multipass launch --name qa-node-2 --cpus 10 --mem 20G --disk 20G multipass launch --name qa-node-3 --cpus 10 --mem 20G --disk 20G # 挂载 multipass mount /home/work/ecsp/deploy/ecsp-edge rd-node-1:/home/work/host multipass mount /home/work/ecsp/deploy/ecsp-edge rd-node-2:/home/work/host multipass mount /home/work/ecsp/deploy/ecsp-edge qa-node-1:/home/work/host multipass mount /home/work/ecsp/deploy/ecsp-edge qa-node-2:/home/work/host multipass mount /home/work/ecsp/deploy/ecsp-edge qa-node-3:/home/work/host # 为 VM 启动一个 shell multipass shell rd-node-1 multipass shell rd-node-2 multipass shell qa-node-1 multipass shell qa-node-2 multipass shell qa-node-3 # 安装需要的 sudo su apt update apt install net-tools selinux-utils # 删除 # Delete instances multipass delete ecsp-node-1 multipass delete ecsp-node-2 # Purge all deleted instances permanently multipass purge 网络 # 使用的是桥接模式，因为：</description>
    </item>
    <item>
      <title>Nvidia</title>
      <link>https://kingye.me/note-cs/docs/basic/cc/gpu/nvidia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/cc/gpu/nvidia/</guid>
      <description>Nvidia # 例如： NVIDIA GeForce RTX 3060 Ti&#xA;NVIDIA: 即英伟达，品牌名 GeForce: 是显卡系列名称 Tesla: 专业级显卡, Data Center 数值计算 深度学习、人工智能和高性能计算 Quadro: 专业级显卡 NVIDIA RTX 图形计算 专业可视化设计和创作 GeForce: 普通消费级显卡 图形计算 游戏娱乐领域 RTX: 代表“高端”，一般是带光影追踪功能，只出现在 20 系显卡及以上 GTX 是系列中的高端显卡 GTS 是系列中的中端显卡 GT 是系列中的入门级显卡 30: 代表的是第几代 20 30 40 6: 是显卡性能档次的定位 89 是高端 567 是中端 1234 是低端 0: 不用管这位数字，一般都是 0 Ti Ti 增强 Super 小增强 SE 阉割 M 等于移动端如 MX, Max-Q AD102 (76.3B): 4090&#xA;AD103 (45.</description>
    </item>
    <item>
      <title>picgo</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/picgo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/picgo/</guid>
      <description> picgo # CLI 命令 # PicGo/PicGo-Core # Molunerfinn/PicGo # picgo vscode 快捷键 # Windows/Unix Uploading an image from clipoard: Ctrl + Alt + U Uploading images from explorer: Ctrl + Alt + E Uploading an image from input box: Ctrl + Alt + O OsX Uploading an image from clipboard: Cmd + Opt + U Uploading images from explorer: Cmd + Opt + E Uploading an image from input box: Cmd + Opt + O </description>
    </item>
    <item>
      <title>pip</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/pip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/pip/</guid>
      <description> pip # # 设置 镜像源 python -m pip install -i https://pypi.tuna.tsinghua.edu.cn/simple --upgrade pip pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple # 临时安装 pip install -i https://pypi.tuna.tsinghua.edu.cn/simple xxxx </description>
    </item>
    <item>
      <title>pipenv</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/pipenv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/pipenv/</guid>
      <description>pipenv # pypa/pipenv # 进入虚拟环境 pipenv shell pipenv shell --python=3.10 # 退出虚拟环境 exit 设置镜像源 # # vim Pipfile [[source]] # url 替换成这个源 url = &amp;#34;https://pypi.tuna.tsinghua.edu.cn/simple&amp;#34; 如果没有 Pipfile 指定，pipenv 默认使用最高版本的 python&#xA;Pipenv uses a different finding approach that the highest version goes first. You can anyway pass the python version by pipenv install &amp;ndash;python=3.7.</description>
    </item>
    <item>
      <title>pyenv</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/pyenv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/pyenv/</guid>
      <description>pyenv # pyenv/pyenv 安装 # git clone https://github.com/pyenv/pyenv.git ~/.pyenv echo &amp;#39;export PYENV_ROOT=&amp;#34;$HOME/.pyenv&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc echo &amp;#39;command -v pyenv &amp;gt;/dev/null || export PATH=&amp;#34;$PYENV_ROOT/bin:$PATH&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc echo &amp;#39;eval &amp;#34;$(pyenv init -)&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc # 使用 taobao 的 npm 源 cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; ~/.zshrc function pyenvinstall { wget -c https://npm.taobao.org/mirrors/python/\$@/Python-\$@.tar.xz -P ~/.pyenv/cache/ pyenv install \$@ } EOF 安装依赖 # 之后才能编译 python 成功&#xA;sudo apt update sudo apt install -y \ gcc \ build-essential \ curl \ libbz2-dev \ libffi-dev \ liblzma-dev \ libncursesw5-dev \ libreadline-dev \ libsqlite3-dev \ libssl-dev \ libxml2-dev \ libxmlsec1-dev \ llvm \ make \ tk-dev \ wget \ xz-utils \ zlib1g-dev 使用 # pyenv # 列出所有可安装 python 版本 pyenv install -l # 安装 pyenv install 3.</description>
    </item>
    <item>
      <title>pyenv</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/pyenv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/pyenv/</guid>
      <description>pyenv/pyenv 安装 # 使用 # </description>
    </item>
    <item>
      <title>pytorch</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/pytorch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/pytorch/</guid>
      <description> pytorch # # cuda 11.4 conda install pytorch==1.12.1 torchvision==0.13.1 torchaudio==0.12.1 cudatoolkit=11.3 -c pytorch </description>
    </item>
    <item>
      <title>ROM</title>
      <link>https://kingye.me/note-cs/docs/basic/cc/rom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/cc/rom/</guid>
      <description>ROM: Read-only memory, 只读存储器 # ROM 有 5 种类型：&#xA;掩膜编程的只读存储器 MROM（Mask-programmedROM） 可编程的只读存储器 PROM（Programmable ROM） 可擦除可编程的只读存储器 EPROM（Erasable Programmable ROM） 可电擦除可编程的只读存储器 EEPROM（Elecrically Erasable Programmable ROM） 快擦除读写存储器（Flash Memory） Memory Card 是一种使用 Flash Memory 技术的可移动存储卡 EPROM: Erasable Programmable Read-Only Memory 可擦除可编程式只读存储器 # EEPROM: Electrically-Erasable Programmable Read-Only Memory 电子式可擦除可编程只读存储器 # Flash memory 闪存 # 也叫快闪内存 手机上的闪存通常分为 eMMC UFS Universal Flash Storage, 通用闪存存储 UFS 卡被视作嵌入式多媒体记忆卡（embedded Multi Media Card，eMMC）和 SD 卡的取代者 UFS 相较 eMMC 最大的不同是并行信号改为了更加先进的串行信号，从而可以迅速提高频率；同时半双工改为全双工 UFS 基于小型电脑系统介面（SCSI）结构模型（SCSI Architectural Model）以及支援 SCSI 标记指令序列（SCSI Tagged Command Queuing） 2011-02 JEDEC 固态技术协会（JEDEC）研发了 UFS 1.</description>
    </item>
    <item>
      <title>ruby</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/ruby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/ruby/</guid>
      <description> ruby # 安装 # brew install ruby&#xA;If you need to have ruby first in your PATH, run: echo &amp;#39;export PATH=&amp;#34;/opt/homebrew/opt/ruby/bin:$PATH&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc For compilers to find ruby you may need to set: export LDFLAGS=&amp;#34;-L/opt/homebrew/opt/ruby/lib&amp;#34; export CPPFLAGS=&amp;#34;-I/opt/homebrew/opt/ruby/include&amp;#34; For pkg-config to find ruby you may need to set: export PKG_CONFIG_PATH=&amp;#34;/opt/homebrew/opt/ruby/lib/pkgconfig&amp;#34; </description>
    </item>
    <item>
      <title>Streamlit</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/streamlit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/streamlit/</guid>
      <description> Streamlit # streamlit/streamlit pip install streamlit streamlit run xxx.py --server.address &amp;#34;0.0.0.0&amp;#34; --server.port 7865 </description>
    </item>
    <item>
      <title>systemd</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/systemd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/systemd/</guid>
      <description> systemd # systemctl # systemctl list-units --type=service --state=active | grep ray </description>
    </item>
    <item>
      <title>tmux</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/tmux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/tmux/</guid>
      <description> tmux # gpakosz/.tmux 配置 # ChrisJohnsen/tmux-MacOSX-pasteboard # Using the Mac OS X programs pbpaste and pbcopy under tmux does not work.&#xA;Other services and unpatched builds of screen are also affected.&#xA;gpakosz/.tmux # Oh My Tmux!&#xA;cd git clone https://github.com/gpakosz/.tmux.git ln -s -f .tmux/.tmux.conf cp .tmux/.tmux.conf.local . 教程 # tmux 2: Productive Mouse-Free Development by @bphogan. 手把手教你使用终端复用神器 Tmux，丢掉鼠标不是梦 [视频] 让你的 tmux 起死回生！[视频] </description>
    </item>
    <item>
      <title>v2ray</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/v2ray/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/v2ray/</guid>
      <description>v2ray # 服务端 # wget -N --no-check-certificate -q -O install.sh &amp;#34;https://raw.githubusercontent.com/wulabing/Xray_onekey/nginx_forward/install.sh&amp;#34; &amp;amp;&amp;amp; chmod +x install.sh &amp;amp;&amp;amp; bash install.sh # 启动方式 # 启动 Xray：systemctl start xray # 停止 Xray：systemctl stop xray # 启动 Nginx：systemctl start nginx # 停止 Nginx：systemctl stop nginx # 相关目录 # Web 目录：/www/xray_web # Xray 服务端配置：/usr/local/etc/xray/config.json # Nginx 目录： /etc/nginx openai # docker run -d --name warp -p 127.0.0.1:7081:1080 -p 127.0.0.1:7082:8080 --restart unless-stopped amirdaaee/cloudflare-warp:latest curl -x &amp;#34;socks5://127.0.0.1:7081&amp;#34; ipinfo.</description>
    </item>
    <item>
      <title>vim</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/vim/</guid>
      <description>vim # 教程 # iggredible/Learn-Vim # A book for learning the Vim editor the smart way.</description>
    </item>
    <item>
      <title>VSCode</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/vscode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/vscode/</guid>
      <description>VSCode # Microsoft/vscode 安装 # brew cask install visual-studio-code 配置 # settings.json&#xA;{ &amp;#34;gitlens.advanced.messages&amp;#34;: { &amp;#34;suppressShowKeyBindingsNotice&amp;#34;: true }, &amp;#34;gitlens.historyExplorer.enabled&amp;#34;: true, &amp;#34;java.errors.incompleteClasspath.severity&amp;#34;: &amp;#34;ignore&amp;#34;, &amp;#34;materialTheme.autoApplyIcons&amp;#34;: true, &amp;#34;workbench.colorCustomizations&amp;#34;: {}, &amp;#34;materialTheme.accentPrevious&amp;#34;: &amp;#34;Breaking Bad&amp;#34;, &amp;#34;materialTheme.fixIconsRunning&amp;#34;: false, // Controls the font family. &amp;#34;editor.fontFamily&amp;#34;: &amp;#34;Consolas, &amp;#39;微软雅黑&amp;#39;, Dengxian, Menlo, Monaco, &amp;#39;Courier New&amp;#39;, monospace&amp;#34;, // &amp;#34;editor.fontFamily&amp;#34;: &amp;#34;Inconsolata, Consolas, &amp;#39;微软雅黑&amp;#39;, Dengxian, Menlo, Monaco, &amp;#39;Courier New&amp;#39;, monospace&amp;#34;, &amp;#34;editor.lineHeight&amp;#34;: 22, &amp;#34;editor.fontSize&amp;#34;: 14, &amp;#34;workbench.startupEditor&amp;#34;: &amp;#34;newUntitledFile&amp;#34;, &amp;#34;editor.suggestSelection&amp;#34;: &amp;#34;first&amp;#34;, &amp;#34;vsintellicode.modify.editor.suggestSelection&amp;#34;: &amp;#34;automaticallyOverrodeDefaultValue&amp;#34;, &amp;#34;python.jediEnabled&amp;#34;: false, &amp;#34;leetcode.endpoint&amp;#34;: &amp;#34;leetcode-cn&amp;#34;, &amp;#34;python.</description>
    </item>
    <item>
      <title>XDM</title>
      <link>https://kingye.me/note-cs/docs/tool/macos/xdm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/macos/xdm/</guid>
      <description>XDM # 下载</description>
    </item>
    <item>
      <title>zsh</title>
      <link>https://kingye.me/note-cs/docs/tool/linux/ubuntu/zsh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/tool/linux/ubuntu/zsh/</guid>
      <description> zsh # oh-my-zsh # 安装&#xA;apt install -y git zsh # sh -c &amp;#34;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34; sh -c &amp;#34;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&amp;#34; cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; ~/.zshrc export PROMPT=&amp;#39;%{$fg[magenta]%}%(?..%?%1v)%n@%{$fg[green]%}%M:%{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)&amp;#39; EOF zsh alias cdcode=&amp;#39;cd ~/code&amp;#39; alias cdstudy=&amp;#39;cdcode &amp;amp;&amp;amp; cd study&amp;#39; alias cdtest=&amp;#39;cdstudy &amp;amp;&amp;amp; cd test&amp;#39; alias cdgithub=&amp;#39;cdcode &amp;amp;&amp;amp; cd github&amp;#39; alias cdgitlab=&amp;#39;cdcode &amp;amp;&amp;amp; cd gitlab&amp;#39; alias cdbitbucket=&amp;#39;cdcode &amp;amp;&amp;amp; cd bitbucket&amp;#39; # proxy # export http_proxy=149.28.137.166:20171 # export https_proxy=149.28.137.166:20171 # 设置默认为 zsh sudo chsh -s /usr/bin/zsh yewang </description>
    </item>
    <item>
      <title>存储卡</title>
      <link>https://kingye.me/note-cs/docs/basic/cc/memory-card/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/basic/cc/memory-card/</guid>
      <description>存储卡 # memory card 存储卡，快闪存储卡、闪卡&#xA;Memory Card 是一种使用 Flash Memory 技术的可移动存储卡&#xA;miniSD&#xA;首次于 2003 年的 CeBIT 展览中由 SanDisk 公布 MiniSD 卡由 SD 卡发展派生而来 记忆棒，Memory Stick，由日本索尼公司最先研发出来的移动存储媒体&#xA;XD 卡，全称为 XD Picture Card，XD 取自于“Extreme Digital”&#xA;XD 卡是由日本奥林巴斯株式会社和富士有限公司联合推出 微硬盘（Microdrive）&#xA;由 IBM 公司开发的一款超级迷你硬盘机产品 华为 NM 存储卡（Nano Memory Card，简称 NM 卡）&#xA;是华为自创的一种超微型存储卡，与 MicroSD 存储卡相比，体积减小 45%，和 Nano SIM 卡的规格几乎完全相同。 CF 卡（Compact Flash）&#xA;1994 年首次由 SanDisk 公司生产并制定了相关规范 对于现在的消费电子产品而言，CF 卡体积是个很大的问题 SM 卡，Smart Media&#xA;由东芝公司在 1995-11 发布的 Flash Memory 存储卡 MMC 卡，MultiMedia Card</description>
    </item>
    <item>
      <title>模板方法</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/template-method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/template-method/</guid>
      <description> 模板方法模式 # Template Method Pattern&#xA;代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>CLAA</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/lorawan/claa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/lorawan/claa/</guid>
      <description>CLAA # The China LoRa Application Alliance&#xA;CLAA IoT Ecosystem</description>
    </item>
    <item>
      <title>参观者</title>
      <link>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/visitor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/direction/se/design-pattern/behavioral/visitor/</guid>
      <description> 参观者模式 # Visitor Pattern&#xA;代码示例 # C C&amp;#43;&amp;#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift TypeScript </description>
    </item>
    <item>
      <title>Easegress</title>
      <link>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/easegress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/domain/cc/istio/advanced/eco/other/easegress/</guid>
      <description>Easegress # megaease/easegress A Cloud Native traffic orchestration system</description>
    </item>
    <item>
      <title>SDP</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/gb28181/sdp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/gb28181/sdp/</guid>
      <description>SDP # Session Description Protocol&#xA;SDP 本身并不提供媒体服务，它只是描述了媒体服务在哪，以及如何和那个媒体服务打交道。&#xA;媒体传输相关的协议在 SIP 消息 SDP 段携带， 在服务器和客户端之间进行商议。&#xA;SDP 协议的具体内容参看：RFC2327&#xA;由于 Web 端、IOS、Android、PC、MAC 端的差异性导致它们对音视频的支持能力不同， 所以我们进行一些音视频会话之前，需要交互下彼此的音视频编解码能力、网络带宽和传输协议等信息， 这些需要协商的信息需要用 SDP 来描述。&#xA;SDP 并不是传输协议，需要用 RTSP、SIP、HTTP 等协议进行承载传输、交换， 如果大家协调好了之后，就可以建立会话，完成真实的音视频码流传输，再完成解码和播放。&#xA;SDP 一般用在媒体会话建立之前，可以适用于实时流媒体、点播、直播等领域，特别在音视频通话、视频会议、VoIP、视频监控等领域应用较多。 媒体码流一般基于 RTP 传输，服务质量用 RTCP 协议保障。&#xA;但是 SDP 的交互不是所有音视频会话建立时都是必须的，假如双方提前约定好这些音视频会话创建需要的信息就不用这个步骤来交互彼此的 SDP 信息， 比如 HTTP-FLV、RTMP-FLV 直播和点播方案，因为一旦采用了这套方案，这些音视频会话建立需要的信息都是确定的， 但是这样会降低或者说没有充分发挥端到端的音视频能力，协商显得更加灵活点。&#xA;SDP 作用 # SDP 作用包括以下一些方面&#xA;建立会话的详细信息，包括名称，网络，带宽等信息 包含在会话中的媒体信息，包括： 媒体类型 (video, audio, etc) 传输协议 (RTP/UDP/IP, H.320, etc) 媒体格式 (H.261 video, MPEG video, etc) 多播或远端（单播）地址和端口 为接收媒体而需的信息 使用的带宽信息 可信赖的接洽信息 如果拓展，还可以描述会话的安全方案信息、服务质量信息等，其中 WebRTC 就在 SDP 的基础上进行了继续拓展</description>
    </item>
    <item>
      <title>SIP</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/gb28181/sip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/gb28181/sip/</guid>
      <description>SIP # SIP 协议使用 RTP 协议传送音视频数据流，使用 SDP 协议进行媒体描述。&#xA;CALL-ID # SIP 的一次通话，可以通过 From, To, Call-ID 三元组来区分。&#xA;CALL-ID 字段用于标识一个特定邀请以及与这个邀请相关的所有后续事务（即标识一个会话）&#xA;包内容 # Message # Session Initiation Protocol (MESSAGE) Request-Line: MESSAGE sip:34020000002000000001@3402000000 SIP/2.0 Message Header Via: SIP/2.0/UDP 192.168.137.109:5060;rport;branch=z9hG4bK1013136823 From: &amp;lt;sip:34020000001320000001@3402000000&amp;gt;;tag=676399389 To: &amp;lt;sip:34020000002000000001@3402000000&amp;gt; Call-ID: 1119613114 CSeq: 20 MESSAGE Content-Type: Application/MANSCDP+xml Max-Forwards: 70 User-Agent: IP Camera Content-Length: 178 Message Body &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;GB2312&amp;#34;?&amp;gt;\n &amp;lt;Notify&amp;gt;\n &amp;lt;CmdType&amp;gt;Keepalive&amp;lt;/CmdType&amp;gt;\n &amp;lt;SN&amp;gt;123&amp;lt;/SN&amp;gt;\n &amp;lt;DeviceID&amp;gt;34020000001320000001&amp;lt;/DeviceID&amp;gt;\n &amp;lt;Status&amp;gt;OK&amp;lt;/Status&amp;gt;\n &amp;lt;Info&amp;gt;\n &amp;lt;/Info&amp;gt;\n &amp;lt;/Notify&amp;gt;\n Bye # 同一个会话，CSeq 要 +1</description>
    </item>
    <item>
      <title>VoIP</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/voip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/voip/</guid>
      <description>VoIP # VoIP vs SIP # In simple terms, VoIP means making or receiving phone calls over the internet or internal networks. SIP, on the other hand, is an application layer protocol that is used to establish, modify and terminate multimedia sessions such as VoIP calls.&#xA;A major difference between VoIP and SIP is their scope. VoIP is not a discrete technology in its own right. Rather, it is actually a family of technologies used within modern telecommunication networks, whereas SIP is a signalling protocol used within the VoIP umbrella.</description>
    </item>
    <item>
      <title>协议详情</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/gb28181/protocal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/gb28181/protocal/</guid>
      <description>GB28181 协议解析 # 点击在线查看标准完整文本： 公共安全视频监控联网系统信息传输、交换、控制技术要求。&#xA;名词解释 # SIP 服务器 # SIP client # 具有注册登记、建立 / 终止会话连接、接收和播放视音频流等功能，主要包括用户界面、用户代理 (UA)、媒体解码模块和媒体通信模块。&#xA;SIP device # 具有注册、建立 / 终止会话连接和控制、采集 / 编解码以及传送视音频流等的功能实体，主要包括用户代理 (UA)、媒体采集 / 编解码模块和媒体通信模块。&#xA;联网系统中 SIP 设备的实现形式主要有支持 SIP 协议的网络摄像机、视频编 / 解码设备、数字硬盘录像机 (DVR) 和报警设备等。若 SIP 设备具有多路视音频编解码通道，每个通道宜成为一个 SIP 逻辑 UA, 具有唯一的 SIPURI, 并向 SIP 服务器注册。&#xA;SIP 监控域 SIP surveil lance realm # 支持本标准规定的通信协议的监控网络，通常由 SIP 服务器和注册在 SIP 服务器上的监控资源、用户终端、网络等组成。&#xA;注册服务器 register server # IETF RFC 3261 规定的 SIP 逻辑实体，是具有接收注册请求、将请求中携带的信息进行保存并提供本域内位置服务的功能服务器。</description>
    </item>
    <item>
      <title>数据包</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/gb28181/packet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/gb28181/packet/</guid>
      <description>数据包 # Register # request: Register (no auth) # Frame 2117: 442 bytes on wire (3536 bits), 442 bytes captured (3536 bits) on interface 0 Ethernet II, Src: 98:df:82:6d:9e:52 (98:df:82:6d:9e:52), Dst: Apple_70:23:0d (88:e9:fe:70:23:0d) Internet Protocol Version 4, Src: 192.168.137.109, Dst: 192.168.137.105 User Datagram Protocol, Src Port: 5060, Dst Port: 5060 Session Initiation Protocol (REGISTER) Request-Line: REGISTER sip:34020000002000000001@3402000000 SIP/2.0 Method: REGISTER Request-URI: sip:34020000002000000001@3402000000 [Resent Packet: True] [Suspected resend of frame: 1613] Message Header Via: SIP/2.</description>
    </item>
    <item>
      <title>源码实现</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/gb28181/code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/gb28181/code/</guid>
      <description> 源码实现 # 名词解释 # AOR：Address Of Record 是 header 中的 From 字段 开源实现 # go # StefanKopieczek/gossip rainliu/gosips 1lann/go-sip ghettovoice/gosip Inspired by: StefanKopieczek/gossip 1lann/go-sip kirm/sip.js cloudwebrtc/go-sip-ua Dependencies ghettovoice/gosip SIP stack c-bata/go-prompt Console for b2bua pixelbender/go-sdp SDP C # pjsip/pjproject C# # GB28181/GB28181.Solution C++ # ossrs/srs xiongziliang/ZLMediaKit Node.js # kirm/sip.js 二进制（前端开源，后端不开源） # livegbs/GB28181-Server </description>
    </item>
    <item>
      <title>gsoap 生成 onvif 框架</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/onvif/gsoap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/onvif/gsoap/</guid>
      <description>gsoap 生成 onvif 框架 # 生成参数 # wsdl2h # -O4 # aggressively optimizes the output by &amp;ldquo;schema slicing&amp;rdquo; to remove unused schema components, see our article Schema Slicing Methods to Reduce Development Costs of WSDL-Based Web Services for details;&#xA;-P # don&amp;rsquo;t create polymorphic types inherited from xsd__anyType;&#xA;removes the base class xsd__anyType from the generated C++ classes, which are normally added by wsdl2h if the xsd:anyType XSD type is used somewhere in a WSDL.</description>
    </item>
    <item>
      <title>EasyDarwin</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/easydarwin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/easydarwin/</guid>
      <description>EasyDarwin # EasyDarwin 是基于 Apple 的开源项目 Darwin Streaming Server 衍生而来的， Darwin 本身支持的是 RTSP 流媒体协议&#xA;macosforge/dss # Darwin Streaming Server is Apple&amp;rsquo;s open source version of the QuickTime Streaming Server technology allowing you to send streaming media across the Internet using the industry standard RTP and RTSP protocols.&#xA;EasyDarwin 生态 # EasyDarwin 开源流媒体服务器：www.EasyDarwin.org EasyDSS 商用流媒体解决方案：www.EasyDSS.com, 点播与直播服务器 EasyBMS EasyRMS, 录播服务器 EasyNVR 无插件直播方案：www.EasyNVR.com, 摄像机互联网直播服务 EasyGB28181Server # EasyNVR 采用的是 Onvif 协议接入云平台， 而 EasyGB28181Server 则是以 GB/T28181 方式接入云平台</description>
    </item>
    <item>
      <title>SRS</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/srs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/srs/</guid>
      <description> SRS # ossrs/srs SRS is a RTMP/HLS/WebRTC/SRT/GB28181 streaming cluster, high efficiency, stable and simple.&#xA;配置信息 # </description>
    </item>
    <item>
      <title>ZLMediaKit</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/zlmediakit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/zlmediakit/</guid>
      <description> ZLMediaKit # xiongziliang/ZLMediaKit # h264推流 ffmpeg -re -i &amp;#34;/path/to/test.mp4&amp;#34; -vcodec h264 -acodec aac -f rtsp -rtsp_transport tcp rtsp://127.0.0.1/live/test ffmpeg -re -stream_loop -1 -i carbrand.MOV -vcodec h264 -acodec aac -f rtp_mpegts rtp://127.0.0.1:10000 rtsp __defaultVhost__ rtp 55667788 CodecH264[1920/1080/50] rtsp://127.0.0.1/rtp/55667788 </description>
    </item>
    <item>
      <title>直播技术</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/live-tech/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/live-tech/</guid>
      <description> 直播技术 # 摄像头视频采集，原始视频数据：RGB/YUV 话筒音频采集，原始音频数据：PCM 视频文件编码，RGB/YUV -&amp;gt; H.264/H.265 音频文件编码，PCM -&amp;gt; AAC 编码为有流媒体特性的多媒体容器格式（Multimedia Container Format）， 如 FLV/TS/RTMP Package 推流到流媒体服务器 应用层：HLS/RTSP/RTMP 传输层：RTP/RTCP 网络层：RSVP 服务端处理 转码/录制/截图/鉴黄 生成拉流 URL 拉流到客户端 应用层：HLS/RTMP 传输层：RTP/RTCP 网络层：RSVP 解复用，多媒体容器格式（FLV/TS/RTMP Package）的流 -&amp;gt; 音视频数据（H.264/AAC） 解码视频文件为 YUV/RGB，解码音频文件为 PCM 硬解码（GPU 解码，CPU 辅助） 软解码（CPU 解码） 音画同步 视频数据（YUV/RGB）发送到视频输出设备，音频数据（PCM）发送到音频输出设备 </description>
    </item>
    <item>
      <title>视频编码</title>
      <link>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/video-codec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/note-cs/docs/study/skill/stream-media/stream-media/video-codec/</guid>
      <description>视频编码 # 年份 标准 制定组织 解除著作权保护（DRM-free） 主要应用 1984 H.120 ITU-T 是 1990 H.261 ITU-T 是 视频会议、视频通话 1993 MPEG-1 第二部分 ISO／IEC 是 影音光盘（VCD） 1995 H.262/MPEG-2 第二部分 ISO／IEC、ITU-T 否 DVD 影碟（DVD-Video）、 蓝光（ Blu-Ray）影碟、数字视频广播（DVB）、SVCD 1996 H.263 ITU-T 视频会议、视频通话、 3G 手机视频（3GP） 1999 MPEG-4 第二部分 ISO／IEC 否 2003 H.264/MPEG-4 AVC ISO／IEC、ITU-T 否 蓝光（ Blu-Ray）影碟、数字视频广播（DVB）、iPod 视频、 高清 DVD（HD DVD） 2013 H.265/High Efficiency Video Coding ISO/IEC、ITU-T 否 尚未普及 AVC (H.264) # H.264，又称为 MPEG-4 第 10 部分，高级视频编码（英语： MPEG-4 Part 10, Advanced Video Coding ，缩写为 MPEG-4 AVC）是一种面向块，基于运动补偿的视频编码标准（英语：Advanced Video Coding） 。</description>
    </item>
  </channel>
</rss>
